(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{345:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"栈内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈内存"}},[s._v("#")]),s._v(" 栈内存")]),s._v(" "),t("p",[s._v("栈区的内存由编译器自动进行分配和释放，栈区中存储着函数的参数以及局部变量，它们会随着函数的创建而创建，函数的返回而销毁。")]),s._v(" "),t("p",[s._v("每个"),t("code",[s._v("goroutine")]),s._v("都维护着一个自己的栈区，这个栈区只能自己使用不能被其他"),t("code",[s._v("goroutine")]),s._v("使用。栈区的初始大小是 2KB.")]),s._v(" "),t("p",[s._v("栈内存空间、结构和初始大小经过了几个版本的更迭")]),s._v(" "),t("ul",[t("li",[s._v("v1.0 ~ v1.1 : 最小栈内存空间为 4KB；")]),s._v(" "),t("li",[s._v("v1.2 : 将最小栈内存提升到了 8KB；")]),s._v(" "),t("li",[s._v("v1.3 : 使用连续栈替换之前版本的分段栈；")]),s._v(" "),t("li",[s._v("v1.4 ~ v1.19 : 将最小栈内存降低到了 2KB；")])]),s._v(" "),t("p",[s._v("栈结构经过了分段栈到连续栈的发展过程，介绍如下。")]),s._v(" "),t("h2",{attrs:{id:"分段栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分段栈"}},[s._v("#")]),s._v(" 分段栈")]),s._v(" "),t("p",[s._v("随着"),t("code",[s._v("goroutine")]),s._v("调用的函数层级的深入或者局部变量需要的越来越多时，运行时会调用"),t("code",[s._v("runtime.morestack")]),s._v("和"),t("code",[s._v("runtime.newstack")]),s._v(" 创建一个新的栈空间，这些栈空间是不连续的，但是当前"),t("code",[s._v("goroutine")]),s._v("的多个栈空间会以双向链表的形式串联起来，运行时会通过指针找到连续的栈片段。 如下图所示。")]),s._v(" "),t("p",[s._v("优点：")]),s._v(" "),t("p",[s._v("按需为当前"),t("code",[s._v("goroutine")]),s._v("分配内存并且及时减少内存的占用。")]),s._v(" "),t("p",[s._v("缺点：")]),s._v(" "),t("p",[s._v("如果当前"),t("code",[s._v("goroutine")]),s._v("的栈几乎充满，那么任意的函数调用都会触发栈的扩容，当函数返回后又会触发栈的收缩，如果在一个循环中调用函数，栈的分配和释放就会造成巨大的额外开销，这被称为热分裂问题（Hot split）。")]),s._v(" "),t("p",[s._v("为了解决这个问题，Go 在 1.2 版本的时候不得不将栈的初始化内存从 4KB 增大到了 8KB。")]),s._v(" "),t("h2",{attrs:{id:"连续栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连续栈"}},[s._v("#")]),s._v(" 连续栈")]),s._v(" "),t("p",[s._v("连续栈可以解决分段栈中存在的两个问题，其核心原理就是每当程序的栈空间不足时，初始化一片比旧栈大两倍的新栈并将原栈中的所有值都迁移到新的栈中，新的局部变量或者函数调用就有了充足的内存空间。")]),s._v(" "),t("p",[s._v("栈空间不足导致的扩容会经历以下几个步骤：")]),s._v(" "),t("ol",[t("li",[s._v("调用用"),t("code",[s._v("runtime.newstack")]),s._v("在内存空间中分配更大的栈内存空间；")]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("runtime.copystack")]),s._v("将旧栈中的所有内容复制到新的栈中；")]),s._v(" "),t("li",[s._v("将指向旧栈对应变量的指针重新指向新栈；")]),s._v(" "),t("li",[s._v("调用"),t("code",[s._v("runtime.stackfree")]),s._v("销毁并回收旧栈的内存空间；")])]),s._v(" "),t("h2",{attrs:{id:"栈管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈管理"}},[s._v("#")]),s._v(" 栈管理")]),s._v(" "),t("p",[t("code",[s._v("Span")]),s._v("除了用作堆内存分配外，也用于栈内存分配，只是用途不同的"),t("code",[s._v("Span")]),s._v("对应的"),t("code",[s._v("mSpan")]),s._v("状态不同。用做堆内存的"),t("code",[s._v("mSpan")]),s._v("状态为"),t("code",[s._v("mSpanInUse")]),s._v("，而用做栈内存的状态为"),t("code",[s._v("mSpanManual")]),s._v("。")]),s._v(" "),t("p",[s._v("栈空间在运行时中包含两个重要的全局变量，分别是"),t("code",[s._v("runtime.stackpool")]),s._v("和"),t("code",[s._v("runtime.stackLarge")]),s._v("，这两个变量分别表示全局的栈缓存和大栈缓存，前者可以分配小于 32KB 的内存，后者用来分配大于 32KB 的栈空间。")]),s._v(" "),t("p",[s._v("为提高栈内存分配效率，调度器初始化时会初始化两个用于栈分配的全局对象：stackpool 和 stackLarge，介绍如下。")]),s._v(" "),t("h3",{attrs:{id:"stackpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stackpool"}},[s._v("#")]),s._v(" StackPool")]),s._v(" "),t("p",[t("code",[s._v("stackpool")]),s._v("面向 32KB 以下的栈分配，栈大小必须是 2 的幂，最小 2KB，在 Linux 环境下，"),t("code",[s._v("stackpool")]),s._v("提供了 2kB、4KB、8KB、16KB 四种规格的"),t("code",[s._v("mSpan")]),s._v("链表。")]),s._v(" "),t("p",[t("code",[s._v("stackpool")]),s._v("结构定义如下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Global pool of spans that have free stacks.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Stacks are assigned an order according to size.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//\torder = log_2(size/FixedStack)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// There is a free list for each order.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" stackpool "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumStackOrders"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\titem stackpoolItem\n\t"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cpu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stackpoolItem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("cpu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//go:notinheap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" stackpoolItem "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tmu   mutex\n\tspan mSpanList\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mSpanList heads a linked list of spans.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//go:notinheap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mSpanList "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tfirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// first span in list, or nil if none")]),s._v("\n\tlast  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// last span in list, or nil if none")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h3",{attrs:{id:"stacklarge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stacklarge"}},[s._v("#")]),s._v(" StackLarge")]),s._v(" "),t("p",[s._v("大于等于 32KB 的栈，由"),t("code",[s._v("stackLarge")]),s._v("来分配，这也是个"),t("code",[s._v("mSpan")]),s._v("链表的数组，长度为 25。"),t("code",[s._v("mSpan")]),s._v("规格从 8KB 开始，之后每个链表的"),t("code",[s._v("mSpan")]),s._v("规格都是前一个的两倍。")]),s._v(" "),t("p",[s._v("8KB 和 16KB 这两个链表，实际上会一直是空的，留着它们是为了方便使用"),t("code",[s._v("mSpan")]),s._v("包含页面数的（以 2 为底）对数作为数组下标。")]),s._v(" "),t("p",[t("code",[s._v("stackLarge")]),s._v("结构定义如下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Global pool of large stack spans.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" stackLarge "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tlock mutex\n\tfree "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("heapAddrBits "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" pageShift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("mSpanList "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// free lists by log_2(s.npages)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mSpanList heads a linked list of spans.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//go:notinheap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mSpanList "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tfirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// first span in list, or nil if none")]),s._v("\n\tlast  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// last span in list, or nil if none")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h3",{attrs:{id:"内存分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存分配"}},[s._v("#")]),s._v(" 内存分配")]),s._v(" "),t("p",[s._v("如果运行时只使用全局变量来分配内存的话，势必会造成线程之间的锁竞争进而影响程序的执行效率，栈内存由于与线程关系比较密切，所以在每一个线程缓存"),t("code",[s._v("runtime.mcache")]),s._v("中都加入了栈缓存减少锁竞争影响。")]),s._v(" "),t("p",[s._v("同堆内存分配一样，每个 P 也有用于栈分配的本地缓存("),t("code",[s._v("mcache.stackcache")]),s._v(")，这相当于是"),t("code",[s._v("stackpool")]),s._v("的本地缓存，在"),t("code",[s._v("mcache")]),s._v("中的定义如下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//go:notinheap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcache "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The following members are accessed on every malloc,")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// so they are grouped here for better caching.")]),s._v("\n\tnextSample "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// trigger heap sample after allocating this many bytes")]),s._v("\n\tscanAlloc  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bytes of scannable heap allocated")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Allocator cache for tiny objects w/o pointers.")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// See "Tiny allocator" comment in malloc.go.')]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tiny points to the beginning of the current tiny block, or")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nil if there is no current tiny block.")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tiny is a heap pointer. Since mcache is in non-GC'd memory,")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// we handle it by clearing it in releaseAll during mark")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// termination.")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tinyAllocs is the number of tiny allocations performed")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// by the P that owns this mcache.")]),s._v("\n\ttiny       "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\ttinyoffset "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\ttinyAllocs "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The rest is not accessed on every malloc.")]),s._v("\n\n\talloc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numSpanClasses"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// spans to allocate from, indexed by spanClass")]),s._v("\n\n\tstackcache "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumStackOrders"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("stackfreelist\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// flushGen indicates the sweepgen during which this mcache")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// was last flushed. If flushGen != mheap_.sweepgen, the spans")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in this mcache are stale and need to the flushed so they")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// can be swept. This is done in acquirep.")]),s._v("\n\tflushGen "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("p",[t("code",[s._v("stackcache [_NumStackOrders]stackfreelist")]),s._v("即为栈的本地缓存，在 Linux 环境下，每个 P 本地缓存有 4（"),t("code",[s._v("_NumStackOrders")]),s._v("）种规格的空闲内存块链表：2KB，4KB，8KB，16KB，定义如下所示：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Number of orders that get caching. Order 0 is FixedStack")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and each successive order is twice as large.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We want to cache 2KB, 4KB, 8KB, and 16KB stacks. Larger stacks")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// will be allocated directly.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Since FixedStack is different on different systems, we")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// must vary NumStackOrders to keep the same maximum cached size.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   OS               | FixedStack | NumStackOrders")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   -----------------+------------+---------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   linux/darwin/bsd | 2KB        | 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   windows/32       | 4KB        | 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   windows/64       | 8KB        | 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   plan9            | 4KB        | 3")]),s._v("\n_NumStackOrders "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" goarch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PtrSize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("goos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("IsWindows "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("goos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("IsPlan9\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("小于 32KB 的栈分配")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("对于小于 32KB 的栈空间，会优先使用当前 P 的本地缓存。")]),s._v(" "),t("li",[s._v("如果本地缓存中，对应规格的内存块链表为空，就从 stackpool 这里分配 16KB 的内存放到本地缓存（"),t("code",[s._v("stackcache")]),s._v("）中，然后继续从本地缓存分配。")]),s._v(" "),t("li",[s._v("若是"),t("code",[s._v("stackpool")]),s._v("中对应链表也为空，就从堆内存直接分配一个 32KB 的"),t("code",[s._v("span")]),s._v("划分成对应的内存块大小放到"),t("code",[s._v("stackpool")]),s._v("中。不过有些情况下，是无法使用本地缓存的，在不能使用本地缓存的情况下，就直接从"),t("code",[s._v("stackpool")]),s._v("分配。")])]),s._v(" "),t("p",[t("strong",[s._v("大于等于 32KB 的栈分配：")])]),s._v(" "),t("ul",[t("li",[s._v("计算需要的 page 数目，并以 2 为底求对数（log2page），将得到的结果作为 stackLarge 数组的下标，找到对应的空闲"),t("code",[s._v("mSpan")]),s._v("链表。")]),s._v(" "),t("li",[s._v("若链表不为空，就拿一个过来用。如果链表为空，就直接从堆内存分配一个拥有这么多个页面的 span，并把它整个用于分配栈内存；")]),s._v(" "),t("li",[s._v("例如想要分配 64KB 的栈，68/8 是 8 个 page，log2page=log2(8)=3")])]),s._v(" "),t("h3",{attrs:{id:"内存释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存释放"}},[s._v("#")]),s._v(" 内存释放")]),s._v(" "),t("p",[s._v("什么时候释放栈？")]),s._v(" "),t("ul",[t("li",[s._v("如果协程栈没有增长过（还是 2KB），就把这个协程放到有栈的空闲 G 队列中；")]),s._v(" "),t("li",[s._v("如果协程栈增长过，就把协程栈释放掉，再把协程放入到没有栈的空闲 G 队列中。而这些空闲协程的栈，也会在 GC 执行"),t("code",[s._v("markroot")]),s._v("时被释放掉，到时候这些协程也会加入到没有栈的空闲协程队列中。 "),t("code",[s._v(".gFree.stack")]),s._v("中；二是 GC 会处理"),t("code",[s._v("sched.gFree.stack")]),s._v("链表，把这里面所有 g 的栈都释放掉，然后把它们放入"),t("code",[s._v("sched.gFree.noStack")]),s._v("链表中。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/z-1.73vwxo4d0lw0.webp",alt:""}})]),s._v(" "),t("p",[s._v("协程栈释放时是放回当前 P 的本地缓存？还是放回全局栈缓存？还是直接还给堆内存？")]),s._v(" "),t("ul",[t("li",[s._v("其实都有可能，要视情况而定，同栈分配时一样，小于 32KB 和大于等于 32KB 的栈，在释放的时候也会区别对待。")]),s._v(" "),t("li",[s._v("小于 32KB 的栈，释放时会先放回到本地缓存中。如果本地缓存对应链表中栈空间总和大于 32KB 了，就把一部分放回"),t("code",[s._v("stackpool")]),s._v("中，本地这个链表只保留 16KB。如果本地缓存不可用，也会直接放回"),t("code",[s._v("stackpool")]),s._v("中。而且，如果发现这个"),t("code",[s._v("mSpan")]),s._v("中所有内存块都被释放了，就会把它归还给堆内存。")]),s._v(" "),t("li",[s._v("对于大于等于 32KB 的栈释放，如果当前处在 GC 清理阶段（"),t("code",[s._v("gcphase==_GCoff")]),s._v("），就直接释放到堆内存，否则就先把它放回 StackLarge 这里。")])]),s._v(" "),t("h3",{attrs:{id:"栈扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈扩容"}},[s._v("#")]),s._v(" 栈扩容")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("goroutine")]),s._v("运行的时候栈区会按照需要增长和收缩，占用的内存最大限制的默认值在 64 位系统上是 1GB。栈大小的初始值和上限这部分的设置都可以在 Go 的源码"),t("code",[s._v("runtime/stack.go")]),s._v("查看。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/z-2.58n9xf8lpuk0.webp",alt:""}})]),s._v(" "),t("p",[s._v("扩容流程")]),s._v(" "),t("ul",[t("li",[s._v("编译器会为函数调用插入运行时检查"),t("code",[s._v("runtime.morestack")]),s._v("，它会在几乎所有的函数调用之前检查当前"),t("code",[s._v("goroutine")]),s._v("的栈内存是否充足，如果当前栈需要扩容，会调用"),t("code",[s._v("runtime.newstack")]),s._v("创建新的栈 。")]),s._v(" "),t("li",[s._v("旧栈的大小是通过我们上面说的保存在"),t("code",[s._v("goroutine")]),s._v("中的"),t("code",[s._v("stack")]),s._v("信息里记录的栈区内存边界计算出来的，然后用旧栈两倍的大小创建新栈，创建前会检查是新栈的大小是否超过了单个栈的内存上限。")]),s._v(" "),t("li",[s._v("整个过程中最复杂的地方是将指向源栈中内存的指针调整为指向新的栈，这一步完成后就会释放掉旧栈的内存空间了")])]),s._v(" "),t("h3",{attrs:{id:"栈缩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈缩容"}},[s._v("#")]),s._v(" 栈缩容")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("goroutine")]),s._v("运行的过程中，如果栈区的空间使用率不超过 1/4，那么在垃圾回收的时候使用"),t("code",[s._v("runtime.shrinkstack")]),s._v("进行栈缩容，当然进行缩容前会执行一堆前置检查，都通过了才会进行缩容。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/z-3.4p1vo1kvpcs0.webp",alt:""}})]),s._v(" "),t("p",[s._v("缩容流程")]),s._v(" "),t("ul",[t("li",[s._v("如果要触发栈的缩容，新栈的大小会是原始栈的一半，如果新栈的大小低于程序的最低限制 2KB，那么缩容的过程就会停止。")]),s._v(" "),t("li",[s._v("缩容也会调用扩容时使用的"),t("code",[s._v("runtime.copystack")]),s._v("函数开辟新的栈空间，将旧栈的数据拷贝到新栈以及调整原来指针的指向。")])]),s._v(" "),t("p",[s._v("唯一发起栈收缩的地方就是 GC。GC 通过"),t("code",[s._v("scanstack")]),s._v("函数寻找标记 root 节点时，如果发现可以安全的收缩栈，就会执行栈收缩，不能马上执行时，就设置栈收缩标识（"),t("code",[s._v("g.preemptShrink = true")]),s._v("），等到协程检测到抢占标识（"),t("code",[s._v("stackPreempt")]),s._v("）。在让出 CPU 之前会检查这个栈收缩标识，为 true 的话就会先进行栈收缩，再让出 CPU。")])])}),[],!1,null,null,null);t.default=e.exports}}]);