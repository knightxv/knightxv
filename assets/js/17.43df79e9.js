(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{341:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"select-实现逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-实现逻辑"}},[s._v("#")]),s._v(" select 实现逻辑")]),s._v(" "),a("p",[s._v("源码包"),a("code",[s._v("src/runtime/select.go:selectgo()")]),s._v("定义了 select 选择 case 的函数：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("selectgo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cas0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("scase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" order0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ncases "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("函数参数：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("cas0 为 scase 数组的首地址，"),a("code",[s._v("selectgo()")]),s._v("就是从这些 scase 中找出一个返回。")])]),s._v(" "),a("li",[a("p",[s._v("order0 为一个两倍 cas0 数组长度的 buffer，保存 scase 随机序列 pollorder 和 scase 中 channel 地址序列 lockorder")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("pollorder：每次 selectgo 执行都会把 scase 序列打乱，以达到随机检测 case 的目的。")])]),s._v(" "),a("li",[a("p",[s._v("lockorder：所有 case 语句中 channel 序列，以达到去重防止对 channel 加锁时重复加锁的目的。")])])])]),s._v(" "),a("li",[a("p",[s._v("ncases 表示 scase 数组的长度")])])]),s._v(" "),a("p",[s._v("函数返回值：")]),s._v(" "),a("ul",[a("li",[s._v("int： 选中 case 的编号，这个 case 编号跟代码一致")]),s._v(" "),a("li",[s._v("bool: 是否成功从 channle 中读取了数据，如果选中的 case 是从 channel 中读数据，则该返回值表示是否读取成功。")])]),s._v(" "),a("p",[s._v("selectgo 实现伪代码如下：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("selectgo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cas0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("scase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" order0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ncases "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. 锁定scase语句中所有的channel")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. 按照随机顺序检测scase中的channel是否ready")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   2.1 如果case可读，则读取channel中数据，解锁所有的channel，然后返回(case index, true)")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   2.2 如果case可写，则将数据写入channel，解锁所有的channel，然后返回(case index, false)")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   2.3 所有case都未ready，则解锁所有的channel，然后返回（default index, false）")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 所有case都未ready，且没有default语句")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   3.1 将当前协程加入到所有channel的等待队列")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   3.2 当将协程转入阻塞，等待被唤醒")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. 唤醒后返回channel对应的case index")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   4.1 如果是读操作，解锁所有的channel，然后返回(case index, true)")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   4.2 如果是写操作，解锁所有的channel，然后返回(case index, false)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("特别说明：对于读 channel 的 case 来说，如 case elem, ok := <-chan1:, 如果 channel 有可能被其他协程关闭的情况下，一定要检测读取是否成功，因为 close 的 channel 也有可能返回，此时 ok == false。")])])}),[],!1,null,null,null);a.default=e.exports}}]);