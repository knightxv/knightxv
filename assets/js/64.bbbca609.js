(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{386:function(s,a,t){"use strict";t.r(a);var e=t(4),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"四、网络和存储原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、网络和存储原理"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86"}},[s._v("#")]),s._v(" 四、网络和存储原理")]),s._v(" "),a("p",[s._v("问题：")]),s._v(" "),a("ul",[a("li",[s._v("容器： 某个软件完整的运行环境；包含了一个小型的 linux 系统")]),s._v(" "),a("li",[s._v("宿主机里面同时 4 个 nginx； 一个 nginx 运行时完整环境有 20MB？")]),s._v(" "),a("li",[a("ul",[a("li",[s._v("4 个 nginx 合起来占用多少的磁盘空间")]),s._v(" "),a("li",[s._v("80？如果每一个容器启动都是一个完整的 linux 系统一定会很大....")])])])]),s._v(" "),a("p",[s._v("docker 装的和宿主机的优缺点：")]),s._v(" "),a("p",[s._v("优点：docker 的移植性、便捷性高于在宿主机部署、进程隔离、很方便的资源限制")]),s._v(" "),a("p",[s._v("缺点：docker 基于虚拟化技术，损失不到 3%的性能。")]),s._v(" "),a("p",[a("strong",[s._v("镜像 容器")])]),s._v(" "),a("p",[a("code",[s._v("镜像")]),s._v("（Image）：固定不变的。一个镜像可以启动很多容器")]),s._v(" "),a("p",[a("code",[s._v("容器")]),s._v("（Container）：文件系统可能 logs 经常变化的，一个镜像可以启动很多容器。")]),s._v(" "),a("p",[s._v("docker 在底层使用自己的存储驱动。来组件文件内容 storage drivers。")]),s._v(" "),a("h2",{attrs:{id:"_1、docker-存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、docker-存储"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81docker%E5%AD%98%E5%82%A8"}},[s._v("#")]),s._v(" 1、Docker 存储")]),s._v(" "),a("h3",{attrs:{id:"_1、镜像如何存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、镜像如何存储"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81%E9%95%9C%E5%83%8F%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8"}},[s._v("#")]),s._v(" 1、镜像如何存储")]),s._v(" "),a("p",[s._v("截取的 nginx 的分层")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-1.57zflwehs9c.webp",alt:"image-20210628114842703"}})]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("nginx这个镜像怎么存的\n使用：docker image inspect nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-2.34loio12wl40.webp",alt:"image-20210628114916784"}})]),s._v(" "),a("blockquote",[a("p",[s._v("指示了镜像怎么存的")]),s._v(" "),a("p",[s._v("LowerDir ：底层目录; diff（只是存储不同）；包含小型 linux 和装好的软件")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/var/lib/docker/overlay2/67b3802c6bdb5bcdbcccbbe7aed20faa7227d584ab37668a03ff6952e631f7f2/diff：用户文件；\n\n/var/lib/docker/overlay2/f56920fac9c356227079df41c8f4b056118c210bf4c50bd9bb077bdb4c7524b4/diff： nginx的启动命令放在这里\n\n/var/lib/docker/overlay2/0e569a134838b8c2040339c4fdb1f3868a7118dd7f4907b40468f5fe60f055e5/diff： nginx的配置文件在这里\n\n/var/lib/docker/overlay2/2b51c82933078e19d78b74c248dec38164b90d80c1b42f0fdb1424953207166e/diff: 小linux系统\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("倒着看")]),s._v(" "),a("li",[a("ul",[a("li",[s._v("小 linux 系统（FROM apline） + Dockerfile 的每一个命令可能都引起了系统的修改，所以和 git 一样，只记录变化")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-3.32no8f4dods0.webp",alt:"image-20210628115008639"}})]),s._v(" "),a("ul",[a("li",[a("ul",[a("li",[s._v("我们进入到这个镜像启动的容器，容器的文件系统就是镜像的；")]),s._v(" "),a("li",[s._v("docker ps -s；可以看到这个容器真正用到的文件大小")]),s._v(" "),a("li",[s._v("容器会自己建立层；如果想要改东西，把改的内容复制到容器层即可 docker inspect container")])])])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"LowerDir":\n"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462\nc862f1e9a0562de2384dbc-\ninit/diff:/var/lib/docker/overlay2/e3b8bdbb0cfbe5450696c470994b3f99e\n8a7942078e2639a788027529c6278f7/diff:/var/lib/docker/overlay2/67b380\n2c6bdb5bcdbcccbbe7aed20faa7227d584ab37668a03ff6952e631f7f2/diff:/var\n/lib/docker/overlay2/f56920fac9c356227079df41c8f4b056118c210bf4c50bd\n9bb077bdb4c7524b4/diff:/var/lib/docker/overlay2/0e569a134838b8c20403\n39c4fdb1f3868a7118dd7f4907b40468f5fe60f055e5/diff:/var/lib/docker/ov\nerlay2/2b51c82933078e19d78b74c248dec38164b90d80c1b42f0fdb14249532071\n66e/diff",\n       "MergedDir":\n"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462\nc862f1e9a0562de2384dbc/merged",\n       "UpperDir": （镜像的上层可以感知变\n化）"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d\n462c862f1e9a0562de2384dbc/diff",【容器的修改后的文件，保存再宿主机哪里呀。\n容器删除后，那些容器目录还存在吗？一定不再】\n       "WorkDir":\n"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462\nc862f1e9a0562de2384dbc/work"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("ul",[a("li",[s._v("MergedDir ：合并目录；容器最终的完整工作目录全内容都在合并层；数据卷在容器层产生；所有的增删改都在容器层；")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-4.28wheb2g8xwk.webp",alt:"image-20210628115025473"}})]),s._v(" "),a("ul",[a("li",[s._v("UpperDir ：上层目录；")]),s._v(" "),a("li",[s._v("WorkDir ：工作目录（临时层），pid；")])]),s._v(" "),a("blockquote",[a("p",[s._v("LowerDir（底层）\\UpperDir（）\\MergedDir\\WorkDir(临时东西)")]),s._v(" "),a("p",[s._v("docker 底层的 storage driver 完成了以上的目录组织结果；")])]),s._v(" "),a("p",[s._v("哪些东西适合容器运行？")]),s._v(" "),a("ul",[a("li",[s._v("docker 启动一个 MySQL，默认什么都不做？")]),s._v(" "),a("li",[s._v("MySQL 就会丢失数据")]),s._v(" "),a("li",[a("ul",[a("li",[s._v("文件挂载")]),s._v(" "),a("li",[s._v("docker commit：能提交，MySQL 的容器，也能提交。100G；100G，一般不采用这种方式")])])])]),s._v(" "),a("h4",{attrs:{id:"_1、images-and-layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、images-and-layers"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81images-and-layers"}},[s._v("#")]),s._v(" 1、Images and layers")]),s._v(" "),a("p",[s._v("Docker 映像由一系列层组成。 每层代表图像的 Dockerfile 中的一条指令。 除最后一层外的每一层都是只读的。 如以下 Dockerfile：")]),s._v(" "),a("ul",[a("li",[s._v("Dockerfile 文件里面几句话，镜像就有几层")])]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:15.04")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" make /app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" python /app/app.py")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一个指令都可能会引起镜像改变，这些改变类似git的方式逐层叠加。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("该 Dockerfile 包含四个命令，每个命令创建一个层。")]),s._v(" "),a("p",[s._v("FROM 语句从 ubuntu：15.04 映像创建一个图层开始。")]),s._v(" "),a("p",[s._v("COPY 命令从 Docker 客户端的当前目录添加一些文件。")]),s._v(" "),a("p",[s._v("RUN 命令使用 make 命令构建您的应用程序。")]),s._v(" "),a("p",[s._v("最后，最后一层指定要在容器中运行的命令。")]),s._v(" "),a("p",[s._v("每一层只是与上一层不同的一组。 这些层彼此堆叠。")]),s._v(" "),a("p",[s._v("创建新容器时，可以在基础层之上添加一个新的可写层。 该层通常称为“容器层”。 对运行中")]),s._v(" "),a("p",[s._v("的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此薄可写容")]),s._v(" "),a("p",[s._v("器层。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-5.73mutlha23o0.webp",alt:"image-20210628115042492"}})]),s._v(" "),a("h4",{attrs:{id:"_2、container-and-layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、container-and-layers"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81container-and-layers"}},[s._v("#")]),s._v(" 2、Container and layers")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("容器和镜像之间的主要区别是可写顶层。")]),s._v(" "),a("li",[s._v("在容器中添加新数据或修改现有数据的所有写操作都存储在此可写层中。")]),s._v(" "),a("li",[s._v("删除容器后，可写层也会被删除。 基础图像保持不变。 因为每个容器都有其自己的可写容")])]),s._v(" "),a("p",[s._v("​ 器层，并且所有更改都存储在该容器层中，所以多个容器可以共享对同一基础映像的访问，")]),s._v(" "),a("p",[s._v("​ 但具有自己的数据状态。")])]),s._v(" "),a("ul",[a("li",[s._v("下图显示了共享同一 Ubuntu 15.04 映像的多个容器。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-6.5tqflhsm2co0.webp",alt:"image-20210628115103792"}})]),s._v(" "),a("h4",{attrs:{id:"_3、磁盘容量预估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、磁盘容量预估"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_3%E3%80%81%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E9%A2%84%E4%BC%B0"}},[s._v("#")]),s._v(" 3、磁盘容量预估")]),s._v(" "),a("blockquote",[a("p",[s._v("docker ps -s")]),s._v(" "),a("p",[s._v("size：用于每个容器的可写层的数据量（在磁盘上）。")]),s._v(" "),a("p",[s._v("virtual size：容器使用的用于只读图像数据的数据量加上容器的可写图层大小。")]),s._v(" "),a("p",[s._v("多个容器可以共享部分或全部只读图像数据。")]),s._v(" "),a("p",[s._v("从同一图像开始的两个容器共享 100％的只读数据，而具有不同图像的两个容器（具有相同的层）共享这些公共")]),s._v(" "),a("p",[s._v("层。 因此，不能只对虚拟大小进行总计。这高估了总磁盘使用量，可能是一笔不小的数目。")])]),s._v(" "),a("h4",{attrs:{id:"_4、镜像如何挑选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、镜像如何挑选"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_4%E3%80%81%E9%95%9C%E5%83%8F%E5%A6%82%E4%BD%95%E6%8C%91%E9%80%89"}},[s._v("#")]),s._v(" 4、镜像如何挑选")]),s._v(" "),a("blockquote",[a("p",[s._v("busybox：是一个集成了一百多个最常用 Linux 命令和工具的软件。linux 工具里的瑞士军刀")]),s._v(" "),a("p",[s._v("alpine：Alpine 操作系统是一个面向安全的轻型 Linux 发行版经典最小镜像，基于 busybox，功能比")]),s._v(" "),a("p",[s._v("Busybox 完善。")]),s._v(" "),a("p",[s._v("slim：docker hub 中有些镜像有 slim 标识，都是瘦身了的镜像。也要优先选择")]),s._v(" "),a("p",[s._v("无论是制作镜像还是下载镜像，优先选择 alpine 类型.")])]),s._v(" "),a("h4",{attrs:{id:"_5、copy-on-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、copy-on-write"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_5%E3%80%81copy-on-write"}},[s._v("#")]),s._v(" 5、Copy On Write")]),s._v(" "),a("ul",[a("li",[s._v("写时复制是一种共享和复制文件的策略，可最大程度地提高效率。")]),s._v(" "),a("li",[s._v("如果文件或目录位于映像的较低层中，而另一层（包括可写层）需要对其进行读取访问，则它仅使用现有文件。")]),s._v(" "),a("li",[s._v("另一层第一次需要修改文件时（在构建映像或运行容器时），将文件复制到该层并进行修改。 这样可以将 I / O 和每个后续层的大小最小化。")])]),s._v(" "),a("h3",{attrs:{id:"_2、容器如何挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器如何挂载"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81%E5%AE%B9%E5%99%A8%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD"}},[s._v("#")]),s._v(" 2、容器如何挂载")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-7.4rennohzgem0.webp",alt:"image-"}})]),s._v(" "),a("p",[s._v("每一个容器里面的内容，支持三种挂载方式：")]),s._v(" "),a("p",[s._v("1）、docker 自动在外部创建文件夹自动挂载容器内部指定的文件夹内容【Dockerfile VOLUME 指令的作用】")]),s._v(" "),a("p",[s._v("2）、自己在外部创建文件夹，手动挂载")]),s._v(" "),a("p",[s._v("3）、可以把数据挂载到内存中。")]),s._v(" "),a("p",[s._v("--mount 挂载到 linux 宿主机，手动挂载（不用了）")]),s._v(" "),a("p",[s._v("-v 可以自动挂载，到 linux 主机或者 docker 自动管理的这一部分区域")]),s._v(" "),a("ul",[a("li",[s._v("Volumes(卷) ：存储在主机文件系统的一部分中，该文件系统由 Docker 管理（在 Linux 上是“ / var /lib / docker / volumes /”）。 非 Docker 进程不应修改文件系统的这一部分。 卷是在 Docker 中持久存储数据的最佳方法。")]),s._v(" "),a("li",[s._v("Bind mounts(绑定挂载) 可以在任何地方 存储在主机系统上。 它们甚至可能是重要的系统文件或目录。 Docker 主机或 Docker 容器上的非 Docker 进程可以随时对其进行修改。")]),s._v(" "),a("li",[s._v("tmpfs mounts(临时挂载) 仅存储在主机系统的内存中，并且永远不会写入主机系统的文件系统")])]),s._v(" "),a("h4",{attrs:{id:"_1、volume-卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、volume-卷"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81volume-%E5%8D%B7"}},[s._v("#")]),s._v(" 1、volume(卷)")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("匿名卷使用")])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /etc/nginx nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker将创建出匿名卷，并保存容器/etc/nginx下面的内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v 宿主机:容器里的目录")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[a("strong",[s._v("具名卷使用")])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginx:/etc/nginx nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#docker将创建出名为nginx的卷，并保存容器/etc/nginx下面的内容")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("如果将空卷装入存在文件或目录的容器中的目录中，则容器中的内容（复制）到该卷中。")]),s._v(" "),a("p",[s._v("如果启动一个容器并指定一个尚不存在的卷，则会创建一个空卷。")])]),s._v(" "),a("p",[s._v("-v 宿主机绝对路径:Docker 容器内部绝对路径：叫挂载；这个有空挂载问题")]),s._v(" "),a("p",[s._v("-v 不以/开头的路径:Docker 容器内部绝对路径：叫绑定（docker 会自动管理，docker 不会把他当成目录，而把它当前卷）")]),s._v(" "),a("p",[a("strong",[s._v("以上用哪个比较好？？？？？？")])]),s._v(" "),a("ul",[a("li",[s._v("如果自己开发测试，用 -v 绝对路径的方式")]),s._v(" "),a("li",[s._v("如果是生产环境建议用卷")]),s._v(" "),a("li",[s._v("除非特殊 /bin/docker 需要挂载主机路径的则操作 绝对路径挂载")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("nginx--Docker\n/usr/share/nginx/html\n\nnginx测试html挂载几种不同情况：\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".不挂载 效果：访问默认欢迎页\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".挂载 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /root/html:/usr/share/nginx/html\n效果：访问forbidden "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("空挂载"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /root/html:/usr/share/nginx/html nginx\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".具名卷 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" html:/usr/share/nginx/html:ro 效果：访问默认欢迎页"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(":ro 表示容器内只读"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" html:/usr/share/nginx/html:ro nginx\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".匿名卷 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /usr/share/nginx/html （什么都不写也不要加冒号，直接写容器内的目录）\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /usr/share/nginx/html nginx\n\n原因：\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" html:/usr/share/nginx/html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v不以绝对路径方式；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 1、先在docker底层创建一个你指定名字的卷（具名卷） html")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 2、把这个卷和容器内部目录绑定")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 3、容器启动以后，目录里面的内容就在卷里面存着；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### -v nginxhtml:/usr/share/nginx/html 也可以以下操作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 1、 docker create volume nginxhtml 如果给卷里面就行修改，容器内部的也就改")]),s._v("\n了。\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 2、 docker volume inspect nginxhtml")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 3、docker run -d -P -v nginxhtml:/usr/share/nginx/html --")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker inspect 容器的时候可以看到")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mounts"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"volume"')]),s._v(", //这是个卷\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"html"')]),s._v(",  //名字是html\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Source"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/volumes/html/_data"')]),s._v(",  //宿主机的目录。容器里面的哪两个文件都在\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Destination"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/share/nginx/html"')]),s._v(",  //容器内部\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Driver"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),s._v(",\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mode"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),s._v(",\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"RW"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" true,  //读写模式\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Propagation"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#卷：就是为了保存数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#可以对docker自己管理的卷目录进行操作；")]),s._v("\n/var/lib/docker/volumes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("卷的根目录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("h4",{attrs:{id:"_2、bind-mount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、bind-mount"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81bind-mount"}},[s._v("#")]),s._v(" 2、bind mount")]),s._v(" "),a("blockquote",[a("p",[s._v("如果将绑定安装或非空卷安装到存在某些文件或目录的容器中的目录中，则这些文件或目录会被")]),s._v(" "),a("p",[s._v("安装遮盖，就像您将文件保存到 Linux 主机上的/ mnt 中一样，然后 将 USB 驱动器安装到/ mnt 中。")]),s._v(" "),a("p",[s._v("在卸载 USB 驱动器之前，/ mnt 的内容将被 USB 驱动器的内容遮盖。 被遮盖的文件不会被删除或更")]),s._v(" "),a("p",[s._v("改，但是在安装绑定安装或卷时将无法访问。")]),s._v(" "),a("p",[s._v("总结：外部目录覆盖内部容器目录内容，但不是修改。所以谨慎，外部空文件夹挂载方式也会导")]),s._v(" "),a("p",[s._v("致容器内部是空文件夹")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker run -dP -v /my/nginx:/etc/nginx nginx\n\n# bind mount和 volumes 的方式写法区别在于\n# 所有以/开始的都认为是 bind mount ，不以/开始的都认为是 volumes.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("警惕 bind mount 方式，文件挂载没有在外部准备好内容而导致的容器启动失败问题")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一行命令启动nginx，并且配置文件和html页面。需要知道卷的位置才能改")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginxconf:/etc/nginx/ "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginxpage:/usr/share/nginx/html nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想要实现 docker run -d -P -v /root/nginxconf:/etc/nginx/ -v /root/nginxhtml:/usr/share/nginx/html --name=nginx999 nginx")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 1、提前准备好东西 目录nginxconf，目录里面的配置we年都放里面，，再调用命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 2、docker cp nginxdemo:/etc/nginx /root/nginxconf #注意/的使用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 3、docker run -d -P -v /root/nginxconf:/etc/nginx/ -v /root/nginxhtml:/usr/share/nginx/html --name=nginx999 nginx")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_3、管理卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、管理卷"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_3%E3%80%81%E7%AE%A1%E7%90%86%E5%8D%B7"}},[s._v("#")]),s._v(" 3、管理卷")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker volume create xxx：创建卷名\ndocker volume inspect xxx：查询卷详情\ndocker volume ls: 列出所有卷\ndocker volume prune: 移除无用卷\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_4、docker-cp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、docker-cp"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_4%E3%80%81docker-cp"}},[s._v("#")]),s._v(" 4、docker cp")]),s._v(" "),a("p",[s._v("cp 的细节")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CONTAINER:SRC_PATH DEST_PATH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("- ：把容器里面的复制出来\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" SRC_PATH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("- CONTAINER:DEST_PATH：把外部的复制进去\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("SRC_PATH 指定为一个"),a("strong",[s._v("文件")])])]),s._v(" "),a("li",[a("ul",[a("li",[a("p",[s._v("DEST_PATH 不存在：文件名为 DEST_PATH ，内容为 SRC 的内容")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 复制index.html 到nginx的/usr/share/nginx/html/test/(test目录不存在)目录下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不以斜杠结尾")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" index.html nginx:/usr/share/nginx/html/test\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件名为 test 内容为index.html内容")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("DEST_PATH 不存在并且以 / 结尾：报错")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 复制index.html 到nginx的/usr/share/nginx/html/test/(test目录不存在)目录下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" index.html nginx:/usr/share/nginx/html/test/\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 报错")]),s._v("\nno such directory\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("DEST_PATH 存在并且是文件：目标文件内容被替换为 SRC_PATH 的文件内容。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果test文件存在并且是文件 index.html内容会覆盖test文件的内容，文件名不变")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" index.html nginx:/usr/share/nginx/html/test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("DEST_PATH 存在并且是目录：文件复制到目录内，文件名为 SRC_PATH 指定的名字")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果test文件存在并且是文件夹，index.html会复制到test目录下，文件名就是index.html")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" index.html nginx:/usr/share/nginx/html/test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CONTAINER:SRC_PATH DEST_PATH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("- ：把容器里面的复制出来\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" SRC_PATH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("- CONTAINER:DEST_PATH：把外部的复制进去\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("SRC_PATH 指定为一个"),a("strong",[s._v("目录")])])]),s._v(" "),a("li",[a("ul",[a("li",[a("p",[s._v("DEST_PATH 不存在： DEST_PATH 创建文件夹，复制源文件夹内的所有内容")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# testdir 文件夹，容器内会创建文件夹，并复制文件夹内的所有内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" testdir nginx:/usr/share/nginx/html\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("DEST_PATH 存在是文件：报错")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果容器内testdir2是文件，会报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" testdir2 nginx:/usr/share/nginx/html/testdir2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("DEST_PATH 存在是目录")])])])]),s._v(" "),a("li",[a("ul",[a("li",[a("ul",[a("li",[a("p",[s._v("SRC_PATH 不以 /. 结束：源文件夹复制到目标里面")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# testdir不以/.结束，会把testdir整个文件夹复制到testdir2里面去")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" testdir nginx:/usr/share/nginx/html/testdir2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("SRC_PATH 以 /. 结束：源文件夹里面的内容复制到目标里面")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# testdir以/.结束，会把testdir文件夹里面的内容复制到testdir2里面去")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" testdir/. nginx:/usr/share/nginx/html/testdir2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])])])])])]),s._v(" "),a("p",[s._v("自动创建文件夹不会做递归。把父文件夹做好")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本地文件复制到容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" index.html mynginx4:/usr/share/nginx/html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从容器中复制出来")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" mynginx4:/etc/nginx/nginx.conf nginx.conf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_2、docker-网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、docker-网络"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81docker%E7%BD%91%E7%BB%9C"}},[s._v("#")]),s._v(" 2、Docker 网络")]),s._v(" "),a("h3",{attrs:{id:"_1、docker-启动后-网络情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、docker-启动后-网络情况"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81docker%E5%90%AF%E5%8A%A8%E5%90%8E-%E7%BD%91%E7%BB%9C%E6%83%85%E5%86%B5"}},[s._v("#")]),s._v(" 1、Docker 启动后，网络情况")]),s._v(" "),a("p",[s._v("会产生一个名为 "),a("strong",[s._v("docker0")]),s._v(" 的虚拟网桥")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker网络模式命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("容器间的互联和通信以及端口映射")])]),s._v(" "),a("p",[a("strong",[s._v("容器 IP 变动时候可以通过服务名直接网络通信而不受到影响")])]),s._v(" "),a("h3",{attrs:{id:"_2、常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、常用命令"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4"}},[s._v("#")]),s._v(" 2、常用命令")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--help")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create XXX网络名字\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看网络源数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network inspect  XXX网络名字\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" XXX网络名字\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create test_network\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" test_network\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3、网络模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、网络模式"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_3%E3%80%81%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F"}},[s._v("#")]),s._v(" 3、网络模式")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-8.w55yfnnagk0.webp",alt:"image-20220109185946866"}})]),s._v(" "),a("ul",[a("li",[s._v("bridge 模式：使用--network bridge 指定，默认使用 docker0")]),s._v(" "),a("li",[s._v("host 模式：使用--network host 指定")]),s._v(" "),a("li",[s._v("none 模式：使用--network none 指定")]),s._v(" "),a("li",[s._v("container 模式：使用--network container:NAME 或者容器 ID 指定")])]),s._v(" "),a("p",[a("strong",[s._v("docker 容器内部的 ip 是有可能会发生改变的")])]),s._v(" "),a("h4",{attrs:{id:"_1、bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、bridge"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81bridge"}},[s._v("#")]),s._v(" 1、bridge")]),s._v(" "),a("p",[s._v("Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在 "),a("strong",[s._v("内核层")]),s._v(" 连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到 "),a("strong",[s._v("同一个物理网络")]),s._v(" 。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码， "),a("strong",[s._v("让主机和容器之间可以通过网桥相互通信")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 bridge 网络的详细信息，并通过 grep 获取名称项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network inspect bridge "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" name\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ifconfig")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[s._v("1、Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信。")]),s._v(" "),a("p",[s._v("2、docker run 的时候，没有指定 network 的话默认使用的网桥模式就是 bridge，使用的就是 docker0 。在宿主机 ifconfig,就可以看到 docker0 和自己 create 的 network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三…… ，lo 代表 127.0.0.1，即 localhost ，inet addr 用来表示网卡的 IP 地址")]),s._v(" "),a("p",[s._v("3、网桥 docker0 创建一对对等虚拟设备接口一个叫 veth，另一个叫 eth0，成对匹配。")]),s._v(" "),a("p",[s._v("3.1 整个宿主机的网桥模式都是 docker0，类似一个交换机有一堆接口，每个接口叫 veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair）；")]),s._v(" "),a("p",[s._v("3.2 每个容器实例内部也有一块网卡，每个接口叫 eth0；")]),s._v(" "),a("p",[s._v("3.3 docker0 上面的每个 veth 匹配某个容器实例内部的 eth0，两两配对，一一匹配。")]),s._v(" "),a("p",[s._v("通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的 ip，此时两个容器的网络是互通的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-9.4k99sua2a840.webp",alt:"image-20220109190456364"}})])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":8080   "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat81 billygoo/tomcat8-jdk8\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8082")]),s._v(":8080   "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat82 billygoo/tomcat8-jdk8\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat81 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat82 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 eth0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"_2、host"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、host"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81host"}},[s._v("#")]),s._v(" 2、host")]),s._v(" "),a("p",[s._v("直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。")]),s._v(" "),a("p",[s._v("容器将 不会获得 一个独立的 Network Namespace， 而是和宿主机共用一个 Network Namespace。 容器将不会虚拟出自己的网卡而是使用宿主机的 IP 和端口。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-10.47g9hv7muzk0.webp",alt:"image-20220109190711123"}})]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 警告")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8083")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat83 billygoo/tomcat8-jdk8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("问题：")]),s._v(" "),a("p",[s._v("docke 启动时总是遇见标题中的警告")]),s._v(" "),a("p",[s._v("原因：")]),s._v(" "),a("p",[s._v("docker 启动时指定--network=host 或-net=host，如果还指定了-p 映射端口，那这个时候就会有此警告，")]),s._v(" "),a("p",[s._v("并且通过-p 设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。")]),s._v(" "),a("p",[s._v("解决:")]),s._v(" "),a("p",[s._v("解决的办法就是使用 docker 的其他网络模式，例如--network=bridge，这样就可以解决问题，或者直接无视.")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正确")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat83 billygoo/tomcat8-jdk8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("无之前的配对显示了，看容器实例内部")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect tomcat83 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-11.5yrsxwz3sms0.webp",alt:"image-20220109190938880"}})]),s._v(" "),a("p",[a("strong",[s._v("没有设置-p 的端口映射了，如何访问启动的 tomcat83？")])]),s._v(" "),a("p",[s._v("http://宿主机 IP:8080/")]),s._v(" "),a("p",[s._v("在 CentOS 里面用默认的火狐浏览器访问容器内的 tomcat83 看到访问成功，因为此时容器的 IP 借用主机的，")]),s._v(" "),a("p",[s._v("所以容器共享宿主机网络 IP，这样的好处是外部主机与容器可以直接通信。")])]),s._v(" "),a("h4",{attrs:{id:"_3、none"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、none"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_3%E3%80%81none"}},[s._v("#")]),s._v(" 3、none")]),s._v(" "),a("p",[s._v("在 none 模式下，并不为 Docker 容器进行任何网络配置。")]),s._v(" "),a("p",[s._v("也就是说，这个 Docker 容器没有网卡、IP、路由等信息，只有一个 lo")]),s._v(" "),a("p",[s._v("需要我们自己为 Docker 容器添加网卡、配置 IP 等。")]),s._v(" "),a("p",[a("strong",[s._v("禁用网络功能，只有 lo 标识(就是 127.0.0.1 表示本地回环)")])]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8084")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" none "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat84 billygoo/tomcat8-jdk8\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入容器内部查看")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat84 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-12.5bj1jm7o2g0.webp",alt:"image-20220109191146701"}})])]),s._v(" "),a("h4",{attrs:{id:"_4、container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、container"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_4%E3%80%81container"}},[s._v("#")]),s._v(" 4、container")]),s._v(" "),a("p",[s._v("新建的容器和已经存在的一个容器共享一个网络 ip 配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-13.55myr4iwozg0.webp",alt:"image-20220109191221754"}})]),s._v(" "),a("blockquote",[a("p",[s._v("Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M 的大小，所以特别适合容器打包。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正确")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" alpine1  alpine /bin/sh\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" container:alpine1 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" alpine2  alpine /bin/sh\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行结果，验证共用搭桥")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看eth0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假如此时关闭alpine1，再看看alpine2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# eth0消失了")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("h4",{attrs:{id:"_5、自定义网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、自定义网络"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_5%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C"}},[s._v("#")]),s._v(" 5、自定义网络")]),s._v(" "),a("p",[a("strong",[s._v("link 已过时")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-14.613w4atbj2c0.webp",alt:"image-20220109191749232"}})]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":8080  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat81 billygoo/tomcat8-jdk8\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8082")]),s._v(":8080  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat82 billygoo/tomcat8-jdk8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上述成功启动并用docker exec进入各自容器实例内部")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat81 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat82 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照IP地址ping是OK的")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照服务名ping结果???")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 不行")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义桥接网络,自定义网络默认使用的是桥接网络bridge")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建自定义网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create xue_network\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建容器加入上一步新建的自定义网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" xue_network  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat81 billygoo/tomcat8-jdk8\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8082")]),s._v(":8080 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" xue_network  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat82 billygoo/tomcat8-jdk8\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照服务名ping是OK的")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）")])]),s._v(" "),a("p",[a("strong",[s._v("自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）")])]),s._v(" "),a("p",[a("strong",[s._v("自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）")])])]),s._v(" "),a("h3",{attrs:{id:"_4、端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、端口映射"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_4%E3%80%81%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84"}},[s._v("#")]),s._v(" 4、端口映射")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v(":3306 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" hello-mysql\nmysql:5.7\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_5、容器互联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、容器互联"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_5%E3%80%81%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94"}},[s._v("#")]),s._v(" 5、容器互联")]),s._v(" "),a("blockquote",[a("p",[s._v("--link name:alias ，name 连接容器的名称，alias 连接的别名")])]),s._v(" "),a("p",[s._v("场景：我们无需暴露 mysql 的情况下，让 web 应用使用 mysql；")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" mysql01 mysql:5.7\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--link")]),s._v(" mysql01:mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat tomcat:7\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/hosts\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" mysql\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_6、自定义网络-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、自定义网络-原理"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_6%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C-%E5%8E%9F%E7%90%86"}},[s._v("#")]),s._v(" 6、自定义网络（原理）")]),s._v(" "),a("h4",{attrs:{id:"_1、默认网络原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、默认网络原理"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_1%E3%80%81%E9%BB%98%E8%AE%A4%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86"}},[s._v("#")]),s._v(" 1、默认网络原理")]),s._v(" "),a("p",[s._v("Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230116/4-15.1k1chpmay268.webp",alt:"image-20210628115145108"}})]),s._v(" "),a("p",[s._v("Linux 虚拟网络技术。")]),s._v(" "),a("blockquote",[a("p",[s._v("Docker 容器网络就很好的利用了 Linux 虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并让")]),s._v(" "),a("p",[s._v("他们彼此联通（这样一对接口叫 veth pair）；")]),s._v(" "),a("p",[s._v("Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为 Linux 是在内核中进")]),s._v(" "),a("p",[s._v("行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容器")]),s._v(" "),a("p",[s._v("系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。")])]),s._v(" "),a("p",[s._v("原理：")]),s._v(" "),a("p",[s._v("1、每一个安装了 Docker 的 linux 主机都有一个 docker0 的虚拟网卡。桥接网卡")]),s._v(" "),a("p",[s._v("2、每启动一个容器 linux 主机多了一个虚拟网卡。")]),s._v(" "),a("p",[s._v("3、docker run -d -P --name tomcat --net bridge tomcat:8")]),s._v(" "),a("h4",{attrs:{id:"_2、网络模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、网络模式"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_2%E3%80%81%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F"}},[s._v("#")]),s._v(" 2、网络模式")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("网络模式")]),s._v(" "),a("th",[s._v("配置")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("bridge 模式")]),s._v(" "),a("td",[s._v("--net=bridge")]),s._v(" "),a("td",[s._v("默认值，在 Docker 网桥 docker0 上为容器创建新的网络栈")])]),s._v(" "),a("tr",[a("td",[s._v("none 模式")]),s._v(" "),a("td",[s._v("--net=none")]),s._v(" "),a("td",[s._v("不配置网络，用户可以稍后进入容器，自行配置")])]),s._v(" "),a("tr",[a("td",[s._v("container 模式")]),s._v(" "),a("td",[s._v("--net=container:name/id")]),s._v(" "),a("td",[s._v("容器和另外一个容器共享 Network namespace。kubernetes 中的 pod 就是多个容器共享一个 Network namespace。")])]),s._v(" "),a("tr",[a("td",[s._v("host 模式")]),s._v(" "),a("td",[s._v("--net=host")]),s._v(" "),a("td",[s._v("容器和宿主机共享 Network namespace")])]),s._v(" "),a("tr",[a("td",[s._v("用户自定义")]),s._v(" "),a("td",[s._v("--net=自定义网络")]),s._v(" "),a("td",[s._v("用户自己使用 network 相关命令定义网络,创建容器的时候可以指定为自己定义的网络")])])])]),s._v(" "),a("h4",{attrs:{id:"_3、自建网络测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、自建网络测试"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_3%E3%80%81%E8%87%AA%E5%BB%BA%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95"}},[s._v("#")]),s._v(" 3、自建网络测试")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1、docker0网络的特点。，")]),s._v("\n默认、域名访问不通、--link 域名通了，但是删了又不行\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2、可以让容器创建的时候使用自定义网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、自定义创建的默认default "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bridge"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、自定义创建一个网络网络\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--driver")]),s._v(" bridge "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--subnet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.0/16 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--gateway")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.1 mynet\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("tomcat1 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mynet tomcat:jre8-alpine\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("redisserver "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mynet redis\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以上tomcat和redis可以互相ping通")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于没有ping命令的容器可以这样测试")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" container:redisserver alpine\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有东西实时维护好，直接域名ping通")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" NETWORK CONTAINER\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3、跨网络连接别人就用。把tomcat加入到mynet网络")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect mynet tomcat\n效果：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、自定义网络，默认都可以用主机名访问通\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、跨网络连接别人就用 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect mynet tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#4、命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、容器启动，指定容器ip。 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--net")]),s._v(" 自定义网络\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、创建子网。docker network create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--subnet")]),s._v(" 指定子网范围  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--driver")]),s._v(" bridge 所有东西实时\n维护好，直接域名ping同\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、docker compose 中的网络默认就是自定义网络方式\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"_7、docker-平台架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、docker-平台架构"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"#_7%E3%80%81docker%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84"}},[s._v("#")]),s._v(" 7、Docker 平台架构")]),s._v(" "),a("p",[s._v("Docker 运行的基本流程为：")]),s._v(" "),a("ol",[a("li",[s._v("用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。")]),s._v(" "),a("li",[s._v("Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。")]),s._v(" "),a("li",[s._v("Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。")]),s._v(" "),a("li",[s._v("Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以 Graph 的形式存储。")]),s._v(" "),a("li",[s._v("当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。")]),s._v(" "),a("li",[s._v("当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。")]),s._v(" "),a("li",[s._v("Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);