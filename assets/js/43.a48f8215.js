(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{367:function(_,v,e){"use strict";e.r(v);var t=e(4),i=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"mvcc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc"}},[_._v("#")]),_._v(" MVCC")]),_._v(" "),v("h2",{attrs:{id:"mvcc-实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-实现原理"}},[_._v("#")]),_._v(" MVCC 实现原理")]),_._v(" "),v("blockquote",[v("p",[_._v("MVCC 的目的就是多版本的并发控制，在数据库中的实现，就是为了解决读-写冲突的问题，它的实现原理主要是依赖记录中的 3 个隐式字段、undo 日志、read view 来实现的。")])]),_._v(" "),v("h3",{attrs:{id:"隐式字段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隐式字段"}},[_._v("#")]),_._v(" 隐式字段")]),_._v(" "),v("p",[_._v("每行记录除了我们自定义的字段外，还有数据库隐式定义的 DB_TRXID, DB_ROLL, DB_ROW_ID 等字段。")]),_._v(" "),v("ul",[v("li",[_._v("DB_ROW_ID：")])]),_._v(" "),v("p",[_._v("6byte，隐含的自增 ID（隐藏主键），如果数据表没有主键，InnoDB 会自动以 DB_ROW_ID 生成一个聚簇索引。")]),_._v(" "),v("ul",[v("li",[_._v("DB_TRX_ID：")])]),_._v(" "),v("p",[_._v("6byte，最近修改（修改、插入）事务 ID：记录创建这条记录以及最后一次修改该记录的事务的 ID，是一个指针。")]),_._v(" "),v("ul",[v("li",[_._v("DB_ROLL_PTR：")])]),_._v(" "),v("p",[_._v("7byte，回滚指针，指向这条记录的上一个版本（上一个版本存储于，rollback segment 里）。")]),_._v(" "),v("ul",[v("li",[_._v("DELETED_BIT：")])]),_._v(" "),v("p",[_._v("1byte，记录被更新或删除并不代表真的删除，而是删除 flag 变了，相当于记录一次逻辑删除。")]),_._v(" "),v("h3",{attrs:{id:"undo-日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#undo-日志"}},[_._v("#")]),_._v(" UNDO 日志")]),_._v(" "),v("p",[_._v("InnoDB 把这些为了回滚而记录的这些东西称之为 undo log。")]),_._v(" "),v("p",[_._v("值得注意的是，由于查询操作（SELECT）并不会修改任何用户记录，所以在查询操作时，并不需要记录相应的 undo log。")]),_._v(" "),v("p",[_._v("undo log 主要分为以下三种：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("insert undo log：")]),_._v(" "),v("p",[_._v("插入一条记录时，至少把这条记录的主键记录下来，之后回滚的时候只需要把主键对应的记录删除即可。")])]),_._v(" "),v("li",[v("p",[_._v("update undo log：")]),_._v(" "),v("p",[_._v("修改一条记录时，至少要把修改这条记录前的旧值都记录下来，在回滚的时候再把这条记录的值更新为旧值就好了。")])]),_._v(" "),v("li",[v("p",[_._v("delete undo log：")]),_._v(" "),v("p",[_._v("删除一条记录时，至少要把这条记录中的全部内容都记录下来，这样在之后回滚的时候再重新将这些内容组成的记录插入到表中就好了。")]),_._v(" "),v("p",[_._v("删除操作都只是设置一下老记录的 DELETE_BIT，并不是真正将其删除，类似于数据库提供的专门的逻辑删除。")])])]),_._v(" "),v("p",[_._v("为了节省磁盘空间，InnoDB 有专门的 purge（清除）线程来清理 DELETED_BIT 为 true 的记录。\n为了不影响 MVCC 的正常工作，purge 线程自己也维护了一个 read view（这个 read view 相当于当前系统中最老活跃的事务的 read view）。")]),_._v(" "),v("p",[_._v("如果某个记录的 DELETED_BIT 为 true，并且 DB_TRX_ID（最后一个操作的事务 ID） 相对于 purge 线程的 read view 可见，那么这条记录一定是可以被安全清除的。\n对 MVCC 有实质上帮助的是 update undo log，undo log 实际上就是存在于 rollback segment 中的旧纪录链。")]),_._v(" "),v("h2",{attrs:{id:"read-view"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#read-view"}},[_._v("#")]),_._v(" Read View")]),_._v(" "),v("blockquote",[v("p",[_._v("什么是 Read View？说白了 Read View 就是==事务进行快照读操作的时候生产的读视图==，在当前事务执行快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的 ID（当每个事务开启时，都会被分配一个 ID，这个 ID 是默认递增的，所以事务越新，ID 越大）")])]),_._v(" "),v("p",[_._v("我们可以把 Read View 简单的理解成有三个全局属性：")]),_._v(" "),v("ul",[v("li",[_._v("trx_list：未提交事务 ID 列表，用来维护 Read View 生成时刻系统正处于活跃状态的事务 ID。")]),_._v(" "),v("li",[_._v("up_limit_id：记录 trx_list 事务 ID 列表中 最小的 ID，也就是最初修改该记录的事务。")]),_._v(" "),v("li",[_._v("low_limit_id：Read View 生成时刻系统尚未分配的下一个事务 ID，也就是等于"),v("strong",[_._v("目前出现过的最大事务 ID + 1")]),_._v("。")])]),_._v(" "),v("p",[_._v("方法大致流程（对比上面代码）：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("首先判断 DB_TRX_ID < up_limit_id ：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("大于：进入下一个判断。")])]),_._v(" "),v("li",[v("p",[_._v("小于：则当前事务能看到 DB_TRX_ID 所在记录。")])])])]),_._v(" "),v("li",[v("p",[_._v("判断 DB_TRX_ID >= low_limit_id：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("大于：代表 DB_TRX_ID 所在的记录是在 Read View 生成之后才出现的，那对当前事务肯定不可见。")])]),_._v(" "),v("li",[v("p",[_._v("小于：进入下一个判断。")])])])]),_._v(" "),v("li",[v("p",[_._v("判断 DB_TRX_ID 是否在活跃事务中 trx_list.contains(DB_TRX_ID)：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("在：代表 Read View 生成的时候，你这个事务还在活跃状态，并没有 commit，你修改的数据，我当前的事务是看不见的（RR 隔离级别）。")])]),_._v(" "),v("li",[v("p",[_._v("不在：说明你这个事务在 Read View 生成之前就已经 commit 了，你修改的结果，我当前事务是看得见的。")])])])])]),_._v(" "),v("p",[_._v("可以这样理解 Read View ：不应该让当前事务看到的记录版本，这些记录版本对应的事务 ID 都在 Read View 中。")])])}),[],!1,null,null,null);v.default=i.exports}}]);