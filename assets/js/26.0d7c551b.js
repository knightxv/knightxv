(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{350:function(s,e,i){"use strict";i.r(e);var v=i(4),_=Object(v.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"redis-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-概述"}},[s._v("#")]),s._v(" Redis 概述")]),s._v(" "),e("h2",{attrs:{id:"redis-是什么-简述它的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-是什么-简述它的优缺点"}},[s._v("#")]),s._v(" Redis 是什么？简述它的优缺点？")]),s._v(" "),e("p",[s._v("Redis 本质上是一个"),e("strong",[s._v("Key-Value 类型的内存数据库")]),s._v("，很像 Memcached，整个数据库加载在内存当中操作，定期通过异步操作把数据库中的数据 flush 到硬盘上进行保存。")]),s._v(" "),e("p",[e("strong",[s._v("因为是纯内存操作")]),s._v("，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value 数据库。")]),s._v(" "),e("p",[e("strong",[s._v("优点")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("读写性能极高， Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s。")]),s._v(" "),e("li",[s._v("支持数据持久化，支持 AOF 和 RDB 两种持久化方式。")]),s._v(" "),e("li",[s._v("支持事务， Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。")]),s._v(" "),e("li",[s._v("数据结构丰富，除了支持 string 类型的 value 外，还支持 hash、set、zset、list 等数据结构。")]),s._v(" "),e("li",[s._v("支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。")]),s._v(" "),e("li",[s._v("丰富的特性 – Redis 还支持 publish/subscribe， 通知， key 过期等特性。")])]),s._v(" "),e("p",[e("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("数据库容量受到"),e("strong",[s._v("物理内存的限制")]),s._v("，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。")]),s._v(" "),e("li",[e("strong",[s._v("主机宕机，宕机前有部分数据未能及时同步到从机")]),s._v("，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。")])]),s._v(" "),e("h2",{attrs:{id:"redis-为什么这么快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-为什么这么快"}},[s._v("#")]),s._v(" Redis 为什么这么快？")]),s._v(" "),e("ul",[e("li",[s._v("内存存储：Redis 是使用内存(in-memeroy)存储，没有磁盘 IO 上的开销。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)。")]),s._v(" "),e("li",[s._v("单线程实现（ Redis 6.0 以前）：Redis 使用单个线程处理请求，避免了多个线程之间线程切换和锁资源争用的开销。注意：单线程是指的是在核心网络模型中，网络请求模块使用一个线程来处理，即一个线程处理所有网络请求。")]),s._v(" "),e("li",[s._v("非阻塞 IO：Redis 使用多路复用 IO 技术，将 epoll 作为 I/O 多路复用技术的实现，再加上 Redis 自身的事件处理模型将 epoll 中的连接、读写、关闭都转换为事件，不在网络 I/O 上浪费过多的时间。")]),s._v(" "),e("li",[s._v("优化的数据结构：Redis 有诸多可以直接应用的优化数据结构的实现，应用层可以直接使用原生的数据结构提升性能。")]),s._v(" "),e("li",[s._v("使用底层模型不同：Redis 直接自己构建了 VM (虚拟内存)机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。Redis 的 VM(虚拟内存)机制就是暂时把不经常访问的数据(冷数据)从内存交换到磁盘中，从而腾出宝贵的内存空间用于其它需要访问的数据(热数据)。通过 VM 功能可以实现冷热数据分离，使热数据仍在内存中、冷数据保存到磁盘。这样就可以避免因为内存不足而造成访问速度下降的问题。Redis 提高数据库容量的办法有两种：一种是可以将数据分割到多个 RedisServer 上；另一种是使用虚拟内存把那些不经常访问的数据交换到磁盘上。"),e("strong",[s._v("需要特别注意的是 Redis 并没有使用 OS 提供的 Swap，而是自己实现。")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);