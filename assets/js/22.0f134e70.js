(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{347:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"go-堆内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-堆内存管理"}},[s._v("#")]),s._v(" Go 堆内存管理")]),s._v(" "),a("p",[s._v("本文主要记录个人学习 Golang 堆内存管理，涉及到的相关内容，算是对个人所学知识点的梳理与总结。")]),s._v(" "),a("p",[s._v("学习内存管理，肯定首先需要了解内存管理的基本知识，我会按照"),a("strong",[s._v("内存管理基础知识--\x3eTCMalloc--\x3eGo 堆内存管理基础概念--\x3eGo 堆内存分配流程")]),s._v("，这样的顺序来逐步梳理相关知识。")]),s._v(" "),a("h2",{attrs:{id:"内存管理基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理基础知识"}},[s._v("#")]),s._v(" 内存管理基础知识")]),s._v(" "),a("h3",{attrs:{id:"_1-存储器与内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-存储器与内存"}},[s._v("#")]),s._v(" 1. "),a("strong",[s._v("存储器与内存")])]),s._v(" "),a("p",[s._v("在计算机的组成结构中有一个很重要的部分是存储器。它是用来存储程序和数据的部件。对于计算机来说，有了存储器，才有记忆功能，才能保证正常工作。存储器的种类很多。按其用途可分为主存储器（也称为内存储器，简称"),a("strong",[s._v("内存")]),s._v("）和辅助存储器（也称为外存储器）。")]),s._v(" "),a("p",[s._v("外存储器主要是指除计算机内存及 CPU 缓存以外的储存器，此类储存器一般断电后仍然能保存数据。常见的外存储器有硬盘、软盘、光盘、U 盘等。")]),s._v(" "),a("p",[s._v("内存一般采用半导体存储单元，包括随机存储器（RAM），只读存储器（ROM），以及高速缓存（CACHE）。")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("只读存储器 ROM（Read Only Memory）")]),a("br"),s._v("\n只能读出，一般不能写入，即使机器停电，这些数据也不会丢失。一般用于存放计算机的基本程序和数据，如 BIOS ROM。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("随机存储器 RAM（Random Access Memory）")]),a("br"),s._v("\n既可以从中读取数据，也可以写入数据。当机器电源关闭时，存于其中的数据就会丢失。"),a("br"),s._v("\nRAM 分为两种：动态存储芯片（DRAM）和静态存储芯片（SRAM）。")]),s._v(" "),a("ol",[a("li",[s._v("DRAM：DRAM 结构较简单且集成度高，通常用于制造内存条中的存储芯片。")]),s._v(" "),a("li",[s._v("SRAM：SRAM 速度快且不需要刷新操作，但集成度差和功耗较大，通常用于制造容量小但效率高的 CPU 缓存。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("高速缓存 Cache")]),a("br"),s._v("\n高速缓冲存储器是存在于主存与 CPU 之间的一级存储器， 由静态存储芯片(SRAM)组成，容量比较小但速度比主存高得多， 接近于 CPU 的速度。由于从 1980 年开始 CPU 和内存速率差距在不断拉大，为了弥补这 2 个硬件之间的速率差异，所以在 CPU 跟内存之间增加了比内存更快的 Cache，Cache 是内存数据的缓存，可以降低 CPU 访问内存的时间。")]),s._v(" "),a("p",[s._v("三级 Cache 分别是 L1、L2、L3，它们的速率是三个不同的层级，L1 速率最快，与 CPU 速率最接近，是 RAM 速率的 100 倍，L2 速率就降到了 RAM 的 25 倍，L3 的速率更靠近 RAM 的速率。")])])]),s._v(" "),a("p",[a("strong",[s._v("寄存器")]),s._v("是 CPU 内部用来存放数据的一些小型存储区域，用来暂时存放参与运算的数据和运算结果。")]),s._v(" "),a("p",[s._v("那么当 CPU 要去读取来自远程网络服务器上的磁盘文件时，就是由 CPU 直接和远程服务器磁盘交互吗？事实当然不是这样的。由于 CPU 的执行速率远远高于外部存储的读写速率，所以当 CPU 去读取磁盘中数据时，通常会先查看离自己最近的寄存器是否有缓存对应的数据，如果存在想要的数据就会直接获取。而寄存器的读写速率十分接近 CPU，将数据缓存在寄存其中可以极大地提升执行效率，避免低效的磁盘读写降低性能。")]),s._v(" "),a("p",[s._v("由于计算机的存储体系中，存储量越大越低廉的存储设备往往读写越慢，存储量越小越昂贵的存储设备往往读写越快。而为了存储更多的数据，大量数据往往存储在读写慢的存储设备上。为了让 CPU 在执行读写操作时，执行效率尽可能地不被读写慢的存储设备影响，于是下图中的存储器层次结构便孕育而生了。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-1.1dzxsa4ltvy8.webp",alt:""}})]),s._v(" "),a("p",[s._v("存储器层次结构的主要思想，就是让读写更快的存储设备作为读写慢但容量更大的存储器的高速缓存，让 CPU 每次优先访问上层读写更快的设备，尽量减少与低效存储设备的读写交互，以保证计算机的整体性能。")]),s._v(" "),a("h3",{attrs:{id:"_2-虚拟内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟内存"}},[s._v("#")]),s._v(" 2. "),a("strong",[s._v("虚拟内存")])]),s._v(" "),a("h4",{attrs:{id:"_2-1-为什么使用虚拟内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-为什么使用虚拟内存"}},[s._v("#")]),s._v(" 2.1 "),a("strong",[s._v("为什么使用虚拟内存")])]),s._v(" "),a("p",[s._v("计算机对于内存真正的载体是物理内存条,这个是实打实的物理硬件容量，所以在操作系统中定义这部份的容量叫物理内存（主存）。物理内存的布局实际上就是一个内存大数组，如图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-2.4vxm560lbpq0.webp",alt:""}})]),s._v(" "),a("p",[s._v("每一个元素都会对应一个地址，称之为物理内存地址。那么 CPU 在运算的过程中，如果需要从内存中取 1 个字节的数据，就需要基于这个数据的物理内存地址去运算即可，而且物理内存地址是连续的，可以根据一个基准地址进行偏移来取得相应的一块连续内存数据。")]),s._v(" "),a("p",[s._v("一个操作系统是不可能只运行一个程序的，当 N 个程序共同使用同一个物理内存时，就会存在以下问题：")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("1. 内存资源是稀缺的，每个进程为了保证自己能够运行，会为自己申请额外大的内存，导致空闲内存被浪费")]),a("br"),s._v(" "),a("strong",[s._v("2. 物理内存对所有进程是共享的，多进程同时访问同一个物理内存会存在并发问题")])])]),s._v(" "),a("p",[a("strong",[s._v("为了解决以上问题，操作系统便引入了虚拟内存")]),s._v("。通过虚拟内存作为物理内存和进程之间的中间层，让进程通过虚拟内存来访问物理内存。引入了虚拟内存后的操作系统。")]),s._v(" "),a("p",[s._v("如图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-3.3nuh22a7slo0.webp",alt:""}})]),s._v(" "),a("p",[s._v("用户程序（进程）只能使用虚拟的内存地址来获取数据，进程会通过页表中的虚拟内存地址查看 Memory Map，判断当前要访问的虚拟内存地址，是否已经加载到了物理内存。如果已经在物理内存，则取物理内存数据，如果没有对应的物理内存，则从磁盘加载数据到物理内存，并把物理内存地址和虚拟内存地址更新到页表。")]),s._v(" "),a("p",[a("strong",[s._v("引入虚拟内存后，每个进程都有各自的虚拟内存，内存的并发访问问题的粒度从多进程级别，可以降低到多线程级别。从程序的角度来看，它觉得自己独享了一整块内存，且不用考虑访问冲突的问题")]),s._v("。系统会将虚拟地址翻译成物理地址，从内存上加载数据。但如果仅仅把虚拟内存直接理解为地址的映射关系，那就是过于低估虚拟内存的作用了。")]),s._v(" "),a("blockquote",[a("p",[s._v("虚拟内存的目的是为了解决以下几件事："),a("br"),s._v(" "),a("strong",[s._v("（1）物理内存无法被最大化利用。")]),a("br"),s._v(" "),a("strong",[s._v("（2）程序逻辑内存空间使用独立。")]),a("br"),s._v(" "),a("strong",[s._v("（3）内存不够，继续虚拟磁盘空间。")])])]),s._v(" "),a("h4",{attrs:{id:"_2-2-读时共享-写时复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-读时共享-写时复制"}},[s._v("#")]),s._v(" 2.2 "),a("strong",[s._v("读时共享，写时复制")])]),s._v(" "),a("p",[s._v("其中针对（1）的最大化，虚拟内存还实现了“"),a("strong",[a("code",[s._v("读时共享，写时复制")])]),s._v("”的机制，可以在物理层同一个字节的内存地址被多个虚拟内存空间映射，表现方式下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-4.69ftae43ta80.webp",alt:""}})]),s._v(" "),a("p",[s._v("上图所示"),a("strong",[s._v("如果一个进程需要进行写操作，则这个内存将会被复制一份，成为当前进程的独享内存。如果是读操作，可能多个进程访问的物理空间是相同的空间")]),s._v("。")]),s._v(" "),a("p",[s._v("如果一个内存几乎大量都是被读取的，则可能会多个进程共享同一块物理内存，但是他们的各自虚拟内存是不同的。当然这个共享并不是永久的，当其中有一个进程对这个内存发生写，就会复制一份，执行写操作的进程就会将虚拟内存地址映射到新的物理内存地址上。")]),s._v(" "),a("h4",{attrs:{id:"_2-3-虚拟内存映射磁盘空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-虚拟内存映射磁盘空间"}},[s._v("#")]),s._v(" 2.3 "),a("strong",[s._v("虚拟内存映射磁盘空间")])]),s._v(" "),a("p",[s._v("对于第（3）点，是虚拟内存为了最大化利用物理内存，如果进程使用的内存足够大，则导致物理内存短暂的供不应求，那么虚拟内存也会“开疆拓土”从磁盘（硬盘）上虚拟出一定量的空间，挂在虚拟地址上，而且这个动作进程本身是不知道的，因为进程只能够看见自己的虚拟内存空间，如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-5.5zh7h538cic0.webp",alt:""}})]),s._v(" "),a("p",[s._v("综上可见虚拟内存的重要性，不仅提高了利用率而且整条内存调度的链路完全是对用户态物理内存透明，用户可以安心的使用自身进程独立的虚拟内存空间进行开发。")]),s._v(" "),a("h3",{attrs:{id:"_3-页、页表、页表条目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-页、页表、页表条目"}},[s._v("#")]),s._v(" 3. "),a("strong",[s._v("页、页表、页表条目")])]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("页")]),a("br"),s._v("\n页是 1 次内存读取的大小，操作系统中用来描述内存大小的一个"),a("code",[s._v("单位名称")]),s._v("。一个页的含义是大小为 4K（1024*4=4096 字节，可以配置，不同操作系统不一样）的内存空间。操作系统对虚拟内存空间是按照这个单位来管理的。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("页表")]),a("br"),s._v("\n页表实际上就是页表条目(PTE)的集合，就是基于 PTE 的一个数组，页表的大小是以页（4K）为单位的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-6.1zhkixu4jnwg.webp",alt:""}})]),s._v(" "),a("p",[s._v("虚拟内存的实现方式，大多数都是通过页表来实现的。操作系统虚拟内存空间分成一页一页的来管理，每页的大小为 4K（当然这是可以配置的，不同操作系统不一样）。4K 算是通过实践折中出来的通用值，太小了会出现频繁的置换，太大了又浪费内存。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("页表条目(PTE)")]),a("br"),s._v("\n页表条目(PTE)是页表中的一个元素，PTE 是真正起到虚拟内存寻址作用的元素。PTE 的内部结构如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-7.6lrl9qa2wbg0.webp",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("PTE 是由一个有效位和一个包含物理页号或者磁盘地址组成")]),s._v("，有效位表示当前虚拟页是否已经被缓存在主内存中（或者 CPU 的高速缓存 Cache 中）。"),a("br"),s._v(" "),a("strong",[s._v("（1）有效位为 1，表示虚拟页已经被缓存在内存（或者 CPU 高速缓存 TLB-Cache）中")]),s._v("。"),a("br"),s._v(" "),a("strong",[s._v("（2）有效位为 0，表示虚拟页未被创建且没有占用内存（或者 CPU 高速缓存 TLB-Cache），或者表示已经创建虚拟页但是并没有存储到内存（或者 CPU 高速缓存 TLB-Cache）中")]),s._v("。"),a("br"),s._v("\n通过上述的标识位，可以将虚拟页集合分成三个子集，下表所示。")])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("有效位")]),s._v(" "),a("th",[s._v("集合特征")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("1")]),s._v(" "),a("td",[s._v("虚拟内存已创建和分配页，已缓存在物理内存中。")])]),s._v(" "),a("tr",[a("td",[s._v("0")]),s._v(" "),a("td",[s._v("虚拟内存还未分配或创建。")])]),s._v(" "),a("tr",[a("td",[s._v("0")]),s._v(" "),a("td",[s._v("虚拟内存已创建和分配页，但未缓存在物理内存中。")])])])]),s._v(" "),a("h3",{attrs:{id:"_4-cpu-访问内存过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-cpu-访问内存过程"}},[s._v("#")]),s._v(" 4. "),a("strong",[s._v("CPU 访问内存过程")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-9.78iwr4k8d3o0.webp",alt:""}})]),s._v(" "),a("p",[s._v("当某个进程进行一次内存访问指令请求，将触发上图的内存访问，具体的访问流程如下：")]),s._v(" "),a("ol",[a("li",[s._v("进程将访问内存相关的指令请求发送给 CPU，CPU 接受到指令请求")]),s._v(" "),a("li",[s._v("CPU 找到数据的虚拟地址（可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了）")]),s._v(" "),a("li",[s._v("将虚拟地址（"),a("code",[s._v("Virtual Page Number")]),s._v("及"),a("code",[s._v("offset")]),s._v("仅是其中一部分，我们这里只展示这两部分的作用）送往内存管理单元（MMU）")]),s._v(" "),a("li",[s._v("MMU 先判断 TLB(Translation Look-aside Buffer)中是否缓存了该虚拟地址的物理地址，如果命中，MMU 直接获取物理地址")]),s._v(" "),a("li",[s._v("如果 TLB 未命中，则将虚拟地址发送给 Table Walk Unit")]),s._v(" "),a("li",[s._v("Table Walk Unit 根据虚拟地址的 VPN 获取到一级页表（页目录），再从一级页表中获取到二级页表，从二级页表中获取到对应的物理内存页地址，结合虚拟地址中的物理内存页偏移量 offset，拿到物理内存页中其中 1 项的物理地址")]),s._v(" "),a("li",[s._v("如果 MMU 未能查到物理地址，则会触发缺页异常；缺页异常被捕获后，操作系统会根据缺页异常类型，做出不同的处理。")]),s._v(" "),a("li",[s._v("如果 MMU 获取到了物理地址，则根据物理地址到 Cache 中查看是否已缓存了对应的内存数据，如果缓存了则返回内存数据")]),s._v(" "),a("li",[s._v("如果 Cache 未命中，则直接拿物理地址到主存中查看是否存在内存数据，如果缓存了则返回内存数据")])]),s._v(" "),a("h3",{attrs:{id:"_5-局部性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-局部性"}},[s._v("#")]),s._v(" 5. "),a("strong",[s._v("局部性")])]),s._v(" "),a("p",[s._v("一个优秀的程序通常具有良好的局部性，它们通常会重复使用已用过的数据，或者使用已用过数据的邻近数据，也就是说，程序常常会使用集中在一起的局部数据。局部性分为：时间局部性和空间局部性。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("空间局部性")]),s._v("：一个内存位置被引用过一次，在短时间内，其附近的内存位置也将被引用。（内存都是按页读取，读取 1 个内存位置后，其所在页的内存数据会被缓存，所以再次读取其附近的内存位置效率更高）")]),s._v(" "),a("li",[a("strong",[s._v("时间局部性")]),s._v("：被引用过一次的内存位置，在短时间内将被多次引用。（执行效率越高的缓存，容量越小。读取 1 个内存位置后，长时间不再读取此内存位置，会有新的内存位置被缓存，该内存位置可能不再存在缓存中）")])]),s._v(" "),a("h3",{attrs:{id:"_6-栈和堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-栈和堆"}},[s._v("#")]),s._v(" 6. "),a("strong",[s._v("栈和堆")])]),s._v(" "),a("p",[s._v("Linux 为每个进程维护了一个单独的虚拟地址空间，并且这个地址空间是连续的，进程就可以很方便地访问内存，也就是我们常说的虚拟内存。虚拟内存形式如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-10.7gx6ztv1uq00.webp",alt:""}})]),s._v(" "),a("p",[s._v("Linux 进程的虚拟内存")]),s._v(" "),a("p",[a("strong",[s._v("一个进程的地址空间通常包括代码段、数据段、堆、栈等，地址从低到高")]),s._v("。代码中使用的内存地址都是虚拟内存地址，而不是实际的物理内存地址。"),a("strong",[s._v("栈和堆只是虚拟内存上 2 块不同功能的内存区域")]),s._v("。在 x64 架构中，使用 rsp 寄存器指向栈顶；在 x86 架构中，使用 esp 寄存器指向栈顶的内存地址。一般可以简称为 sp。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("栈")])])]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("由编译器自动分配和释放，速度快")]),a("br"),s._v("\n栈中存储着函数的入参以及局部变量，这些参数（如函数参数、函数返回地址，局部变量、临时变量等）会随着函数的创建而创建，函数的返回而销毁。(通过 CPU push & release)")]),s._v(" "),a("li",[a("strong",[s._v("栈的特性：后入先出 LIFO")]),a("br"),s._v("\n栈需要存储函数中的局部变量和参数，函数又是最后调用的最先销毁，栈的后进先出正好满足这一点。")]),s._v(" "),a("li",[a("strong",[s._v("栈由高地址向低地址扩展，栈内是连续分配内存的")]),a("br"),s._v("\n如果给一个数组或对象分配内存，栈会选择还没分配的最小的内存地址给数组，在这个内存块中，数组中的元素从低地址到高地址依次分配（不要和栈的从高到低弄混了）。所以数组中第一个元素的其实地址对应于已分配栈的最低地址。")]),s._v(" "),a("li",[a("strong",[s._v("栈只能获取栈顶的内存地址")]),a("br"),s._v("\n栈是从高地址往低地址扩展的，栈顶正好指向数组的起始地址，即数组的指针。")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("栈桢")])])]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("栈帧本质上是一种栈")]),a("br"),s._v("\n栈帧本质上是一种栈。栈帧是指函数在被调用时，所拥有的一块独立的用于存放函数所使用的状态和变量的栈空间。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("函数的每次进入，都对应 1 个栈桢")]),a("br"),s._v("\n每个函数都对应有一个栈帧。同一个函数多次调用，每次可能会分配到不同的栈帧。整个栈的内容在同一个时刻可以看作是由许多栈帧依序“堆叠”组成的。栈桢的结构详见下图。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-11.18suuimjepts.webp",alt:""}})]),s._v(" "),a("p",[s._v("对于一个运行中的函数，其使用的栈帧区域被 sp 和 bp 寄存器限定（对于 x86，sp 等价 esp，bp 等价 rsp；对于 x64，sp 等价 rsp，bp 等价 rbp）。"),a("strong",[s._v("bp 指向栈帧的底部，sp 指向栈帧的顶部")]),s._v("。"),a("br"),s._v("\n在函数中使用的所有变量（本地变量、实参），一般使用 bp 定位。设 N 为整型字节数，bp+2N 是第一个实参的地址，bp-N 是第一个本地变量的地址。")])])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("堆")])])]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("自由分配，自己申请，自己释放（否则发生内存泄漏），速度较慢，更灵活")])]),s._v(" "),a("li",[a("strong",[s._v("堆的特性：先入先出 FIFO")])]),s._v(" "),a("li",[a("strong",[s._v("堆的内存地址是不连续的，由低地址向高地址扩展，一般是链表结构")])])]),s._v(" "),a("p",[s._v("由于栈都会随着函数的创建而创建，函数的返回而销毁。所以我们大多时候谈到的内存管理，都是对堆内存的管理。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"tcmalloc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcmalloc"}},[s._v("#")]),s._v(" TCMalloc")]),s._v(" "),a("p",[s._v("Golang 的内存管理是基于 TCMalloc 的核心思想来构建的。在了解 Golang 的内存管理之前，一定要了解 TCMalloc（Thread Cache Malloc）的内存申请模式。随着 Go 的迭代，Go 的内存管理与 TCMalloc 不一致地方在不断扩大，但其主要思想、原理和概念都是和 TCMalloc 一致的，如果跳过 TCMalloc 直接去看 Go 的内存管理，也许你会似懂非懂。本节将介绍 TCMalloc 的基础理念和结构。")]),s._v(" "),a("p",[s._v("在 Linux 操作系统中，其实有不少的内存管理库，"),a("strong",[s._v("内存管理库的本质都是在多线程编程下，追求更高内存管理效率：更快的分配是主要目的")]),s._v("。")]),s._v(" "),a("p",[s._v("通过引入虚拟内存，使每个进程拥有自己独立的虚拟内存，让内存的并发访问问题的粒度从多进程级别，降低到多线程级别。然而同一进程下的所有线程仍会共享相同的内存空间，它们申请内存时需要加锁，如果不加锁就存在同一块进程内存被 2 个线程同时访问的问题。")]),s._v(" "),a("p",[s._v("TCMalloc 的做法是什么呢？"),a("strong",[s._v("为每个线程预分配一块缓存，线程申请小内存时，可以从缓存分配内存")]),s._v("，这样有 2 个好处：")]),s._v(" "),a("ol",[a("li",[s._v("预分配缓存需要进行 1 次系统调用，后续线程申请小内存时直接从缓存分配，"),a("strong",[s._v("都是在用户态执行的，没有了系统调用，缩短了内存总体的分配和释放时间")])]),s._v(" "),a("li",[s._v("多个线程同时申请小内存时，"),a("strong",[s._v("从各自的缓存分配，不再需要加锁")])])]),s._v(" "),a("h3",{attrs:{id:"_1-基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理"}},[s._v("#")]),s._v(" 1. "),a("strong",[s._v("基本原理")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-12.608kwjgiznw0.webp",alt:""}})]),s._v(" "),a("p",[s._v("结合上图，我们依次介绍下 TCMalloc 的几个重要概念：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("Page")]),a("br"),s._v(" "),a("strong",[s._v("TCMalloc 执行内存管理的一种单位")]),s._v("。操作系统执行内存管理以页单位，TCMalloc 里的 Page 大小与操作系统里的页大小并不一定相等，而是整数倍关系。《TCMalloc 解密》里称 x64 下"),a("strong",[s._v("Page 大小是 8KB")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Span")]),a("br"),s._v(" "),a("strong",[s._v("一个或多个连续的 Page 组成一个 Span，Span 是 TCMalloc 中内存管理的基本单位，多个这样的 Span 就用链表来管理")]),s._v("。比如可以有 1 个 Page 大小的 Span，也可以有 2 个 Page 大小的 Span，Span 比 Page 高一个层级，是为了方便管理一定大小的内存区域。")]),s._v(" "),a("p",[s._v("每个 Span 记录了第一个起始 Page 的编号 Start，和一共有多少个连续 Page 的数量 Length。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-13.3cq4ag5e00o0.webp",alt:""}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Size Class")]),a("br"),s._v(" "),a("strong",[s._v("Size Class 是空间规格")]),s._v("。TCMalloc 会将这些小对象集合划分成多个内存刻度，同属于一个刻度类别下的内存集合称之为属于一个 Size Class。每个 Size Class 都对应一个大小比如 8 字节、16 字节、32 字节等。在申请小对象内存的时候，TCMalloc 会根据使用方申请的空间大小就近向上取最接近的一个 Size Class 的 Span（由多个等空间的 Page 组成）内存块返回给使用方。"),a("br"),s._v("\n如果将 Size Class、Span、Page 用一张图来表示，则具体的抽象关系如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-14.4x8dvlw42qa0.webp",alt:""}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ThreadCache")]),a("br"),s._v(" "),a("strong",[s._v("ThreadCache 是每个线程各自的 Cache，一个 Cache 包含多个空闲内存块链表，每个链表连接的都是大小相同的内存块")]),s._v("。也可以说按内存块大小，给内存块分了个类，这样可以根据申请的内存大小，快速从合适的链表选择空闲内存块。")]),s._v(" "),a("p",[s._v("由于每个线程有自己的 ThreadCache，所以 ThreadCache 访问是无锁的。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("CentralCache")]),a("br"),s._v(" "),a("strong",[s._v("CentralCache 是所有线程共享的缓存，也是保存的空闲内存块链表")]),s._v("，链表的数量与 ThreadCache 中链表数量相同，当 ThreadCache 的内存块不足时，可以从 CentralCache 获取内存块；当 ThreadCache 内存块过多时，可以放回 CentralCache。")]),s._v(" "),a("p",[s._v("由于 CentralCache 是共享的，所以它的访问是要加锁的。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("PageHeap")]),a("br"),s._v(" "),a("strong",[s._v("PageHeap 是对堆内存的抽象，PageHeap 存的是若干 Span 链表")]),s._v("。"),a("br"),s._v("\n如下图所示，分别是 1 页 Page 的 Span 链表，2 页 Page 的 Span 链表等，最后是"),a("strong",[s._v("large span set 用来保存中、大对象")]),s._v("。"),a("strong",[s._v("为了方便 Span 和 Span 之间的管理，Span 集合是以双向链表的形式构建")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-15.5x9ncsbzvq80.webp",alt:""}})]),s._v(" "),a("p",[s._v("当 CentralCache 的内存不足时，会从 PageHeap 获取空闲的内存 Span，然后把 1 个 Span 拆成若干内存块，添加到对应大小的链表中并分配内存；当 CentralCache 的内存过多时，会把空闲的内存块放回 PageHeap 中。毫无疑问，PageHeap 也是要加锁的。")])])]),s._v(" "),a("h3",{attrs:{id:"_2-分配流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分配流程"}},[s._v("#")]),s._v(" 2. "),a("strong",[s._v("分配流程")])]),s._v(" "),a("p",[s._v("TCMalloc 中对于对象类型的划分：")]),s._v(" "),a("ol",[a("li",[s._v("小对象大小：0~256KB")]),s._v(" "),a("li",[s._v("中对象大小：257~1MB")]),s._v(" "),a("li",[s._v("大对象大小：>1MB")])]),s._v(" "),a("p",[a("strong",[s._v("TCMalloc 内存分配流程")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("小对象的分配流程")]),a("br"),s._v("\nThreadCache -> CentralCache -> HeapPage，大部分时候，ThreadCache 缓存都是足够的，不需要去访问 CentralCache 和 HeapPage，无系统调用配合无锁分配，分配效率是非常高的。")]),s._v(" "),a("p",[s._v("具体分配流程，详见下图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-16.3qw5uvmtmts0.webp",alt:""}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("中对象分配流程")]),a("br"),s._v("\n中对象为大于 256KB 且小于等于 1MB 的内存。直接在 PageHeap 中选择适当的大小即可，128 Pages 的 Span 所保存的最大内存就是 1MB。"),a("br"),s._v("\n具体分配流程，详见下图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-17.2r60xk0y3cs0.webp",alt:""}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("大对象分配流程")]),a("br"),s._v("\n对于超过 128 个 Page（即 1MB）的内存分配则为大对象分配流程。从 PageHeap 中的 large span set 选择合适数量的页面组成 span，用来存储数据。"),a("br"),s._v("\n具体分配流程，详见下图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-18.segsuw4qcfk.webp",alt:""}})])])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"go-堆内存管理-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-堆内存管理-2"}},[s._v("#")]),s._v(" Go 堆内存管理")]),s._v(" "),a("h3",{attrs:{id:"_1-go-内存模型层级结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-go-内存模型层级结构"}},[s._v("#")]),s._v(" 1. "),a("strong",[s._v("Go 内存模型层级结构")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-19.7ateq6epa3s.webp",alt:""}})]),s._v(" "),a("p",[s._v("Golang 内存管理模型与 TCMalloc 的设计极其相似。基本轮廓和概念也几乎相同，只是一些规则和流程存在差异。")]),s._v(" "),a("h3",{attrs:{id:"_2-go-内存管理的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-go-内存管理的基本概念"}},[s._v("#")]),s._v(" 2. "),a("strong",[s._v("Go 内存管理的基本概念")])]),s._v(" "),a("p",[s._v("Go 内存管理的许多概念在 TCMalloc 中已经有了，含义是相同的，只是名字有一些变化。")]),s._v(" "),a("h5",{attrs:{id:"_2-1-page"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-page"}},[s._v("#")]),s._v(" 2.1 "),a("strong",[s._v("Page")])]),s._v(" "),a("p",[s._v("与 TCMalloc 中的 Page 相同，x64 架构下 1 个 Page 的大小是 8KB。Page 表示 Golang 内存管理与虚拟内存交互内存的最小单元。操作系统虚拟内存对于 Golang 来说，依然是划分成等分的 N 个 Page 组成的一块大内存公共池。")]),s._v(" "),a("h5",{attrs:{id:"_2-2-mspan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-mspan"}},[s._v("#")]),s._v(" 2.2 "),a("strong",[s._v("mspan")])]),s._v(" "),a("p",[s._v("与 TCMalloc 中的 Span 一致。mspan 概念依然延续 TCMalloc 中的 Span 概念，在 Golang 中将 Span 的名称改为 mspan,1 个 mspan 为多个 Page(go 中为 8KB 的内存大小)。1 个 mspan 对应 1 个或多个大小相同的 object，mspan 主要用于分配对象的区块，下图简单说明了 Span 的内部结构。")]),s._v(" "),a("p",[s._v("mspan 结构体如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-20.5vew1nbyaks0.webp",alt:""}})]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mspan "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在mspan链表中，指向后一个mspan")]),s._v("\n    prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在mspan链表中，指向前一个mspan")]),s._v("\n    list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mSpanList "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 供debug使用")]),s._v("\n    startAddr "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mspan起始地址")]),s._v("\n    npages    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前mspan对应的page数")]),s._v("\n    manualFreeList gclinkptr "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mSpanManual状态mspan中的可用对象链表")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// freeindex是slot索引，标记下一次分配对象时应该开始搜索的地址, 分配后freeindex会增加")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每一次分配都从freeindex开始扫描allocBits，直到它遇到一个表示空闲对象的0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在freeindex之前的元素都是已分配的, 在freeindex之后的元素有可能已分配, 也有可能未分配")]),s._v("\n    freeindex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    nelems "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前span中object数量.")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocCache是从freeindex位置开始的allocBits缓存")]),s._v("\n    allocCache "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocBits用于标记哪些元素是已分配的, 哪些元素是未分配的。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用freeindex + allocBits可以在分配时跳过已分配的元素, 把对象设置在未分配的元素中.")]),s._v("\n    allocBits  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("gcBits\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用于在gc时标记哪些对象存活, 每次gc以后allocBits都会与gcmarkBits保持一致")]),s._v("\n    gcmarkBits "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("gcBits\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 清理代数，每GC1次sweepgen会+2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepgen=currrent sweepgen - 2：该span需要被清扫")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepgen=currrent sweepgen - 1：该span正在被清扫")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepgen=currrent sweepgen：该span已被清扫，带使用")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepgen=currrent sweepgen + 1：该span在清扫开始前，仍然被缓存，需要被清扫")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepgen=currrent sweepgen + 3：该span已被清扫，仍然被缓存")]),s._v("\n    sweepgen    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n    divMul      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for divide by elemsize")]),s._v("\n    allocCount  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 已分配对象的数量")]),s._v("\n    spanclass   spanClass\n    state       mSpanStateBox\n    needzero    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在分配前需要清零")]),s._v("\n    elemsize    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对象大小")]),s._v("\n    limit       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// span数据末尾")]),s._v("\n    speciallock mutex         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// specials链表的锁")]),s._v("\n    specials    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("special      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据object偏移量排序的special链表.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("p",[s._v("mspan 的 allocBits 是一个 bitmap，用于标记哪些元素是已分配的, 哪些元素是未分配的。通过使用 allocBits 已经可以达到 O(1)的分配速度，但是 go 为了极限性能，对其做了一个缓存 allocCache，allocCache 是从 freeindex 开始的 allocBits 缓存。")]),s._v(" "),a("h5",{attrs:{id:"_2-3-size-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-size-class"}},[s._v("#")]),s._v(" 2.3 "),a("strong",[s._v("Size Class")])]),s._v(" "),a("p",[s._v("Golang 内存管理针对衡量内存的概念又更加详细了很多，这里面介绍一些基础的有关内存大小的名词及算法。")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("Object Class")]),s._v("是指协程应用逻辑一次向 Go 内存申请的对象"),a("strong",[s._v("Object 大小")]),s._v("。Object 是 Golang 内存管理模块针对内存管理更加细化的内存管理单元。一个 Span 在初始化时会被分成多个 Object。"),a("br"),s._v("\n比如 Object Size 是 8B（8 字节）大小的 Object，所属的 Span 大小是 8KB（8192 字节），那么这个 Span 就会被平均分割成 1024（8192/8=1024）个 Object。")]),s._v(" "),a("p",[s._v("逻辑层从 Golang 内存模型取内存，实则是分配一个 Object 出去。为了更好的让读者理解，这里假设了几个数据来标识 Object Size 和 Span 的关系，如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-21.3u1zjabjcgg0.webp",alt:""}})])])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("Page 是 Golang 内存管理与操作系统交互时，衡量内存容量的基本单元")]),a("br"),s._v(" "),a("strong",[s._v("Object 是用来存储一个变量数据的内存空间， 是 Golang 内存管理为对象分配存储内存的基本单元")])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[s._v("Size Class")]),s._v("是指"),a("strong",[s._v("Object 大小的级别")]),s._v("。比如 Object Size 在 1Byte~8Byte 之间的 Object 属于 Size Class 1 级别，Object Size 在 8B~16Byte 之间的属于 Size Class 2 级别。本质上，golang 的 Size Class 与 TCMalloc 中 size class 都是表示一块内存的所属规格。")])]),s._v(" "),a("blockquote",[a("p",[s._v("go 中共存在"),a("code",[s._v("_NumSizeClasses = 68")]),s._v("个 Size Class（0~68）,所以也对应着 68 个 Object Class")])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("Span Class")]),s._v("是 Golang 内存管理额外定义的规格属性，也是针对 Object 大小来进行划分的。但是"),a("strong",[s._v("为了优化 GC Mark 阶段，go 内部让一个 Size Class 对应 2 个 Span Class")]),s._v("，其中一个 Span 为存放需要 GC 扫描的对象（包含指针的对象， scan span），另一个 Span 为存放不需要 GC 扫描的对象（不包含指针的对象， noscan span）。")])]),s._v(" "),a("blockquote",[a("p",[s._v("通过设置两种 span，让 GC 扫描对象的时候，对于 noscan 的 span 可以不去查看 bitmap 区域来标记子对象。也就是说进行扫描的时候，直接判定该 span 中的对象不会存在引用对象，不再进行更深层的扫描，这样可以大幅提升 GC Mark 的效率。")])]),s._v(" "),a("p",[s._v("具体 Span Class 与 Size Class 的逻辑结构关系如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-22.7kbvp2uadbk0.webp",alt:""}})]),s._v(" "),a("p",[s._v("其中 Size Class 和 Span Class 的对应关系计算方式可以参考 Golang 源代码，如下：")]),s._v(" "),a("div",{staticClass:"language-auto line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//usr/local/go/src/runtime/mheap.go\n\ntype spanClass uint8\n\n//……(省略部分代码)\n\nfunc makeSpanClass(sizeclass uint8, noscan bool) spanClass {\n   return spanClass(sizeclass<<1) | spanClass(bool2int(noscan))\n}\n\n//……(省略部分代码)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("makeSpanClass()函数为通过 Size Class 来得到对应的 Span Class，其中第二个形参 noscan 表示当前对象是否需要 GC 扫描"),a("br"),s._v("\n，不难看出来 Span Class 和 Size Class 的对应关系公式如下表所示：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("对象")]),s._v(" "),a("th",[s._v("Size Class 与 Span Class 对应公式")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("需要 GC 扫描是否存在引用对象")]),s._v(" "),a("td",[s._v("Span Class = Size Class * 2 + 0")])]),s._v(" "),a("tr",[a("td",[s._v("不需要 GC 扫描是否存在引用对象")]),s._v(" "),a("td",[s._v("Span Class = Size Class * 2 + 1")])])])]),s._v(" "),a("p",[s._v("Golang 源码里列举了详细的 Size Class 和 Object 大小、存放 Object 数量，以及每个 Size Class 对应的 Span 内存大小关系，我们这里只展示部分：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//usr/local/go/src/runtime/sizeclasses.go")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" runtime\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [class]: Size Class")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [bytes/obj]: Object Size，一次对外提供内存Object的大小")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [bytes/span]: 当前Object所对应Span的内存大小")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [objects]: 当前Span一共有多少个Object")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [tail waste]: 当前Span平均分N份Object后，会有多少内存浪费。 ===> [bytes/span]%[bytes/obj]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [max waste]: 当前Size Class最大可能浪费的空间所占百分比。 ===> （(本级Object Size – (上级Object Size + 1)）*本级Object数量) + [tail waste]）/ 本级Span Size")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// class  bytes/obj  bytes/span  objects  tail waste  max waste")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     1          8        8192     1024           0        87.50%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     2         16        8192      512           0        43.75%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     3         32        8192      256           0        46.88%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     4         48        8192      170          32        31.52%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     5         64        8192      128           0        23.44%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     6         80        8192      102          32        19.07%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     7         96        8192       85          32        15.95%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     8        112        8192       73          16        13.56%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     9        128        8192       64           0        11.72%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    10        144        8192       56         128        11.82%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    ......")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("由以上源码可见， 并没有列举 Size Class 为 0 的规格刻度内存。"),a("strong",[s._v("对于 Span Class 为 0 和 1 的，也就是对应 Size Class 为 0 的规格刻度内存，mcache 实际上是没有分配任何内存的")]),s._v("。因为 Golang 内存管理对内存为 0 的数据申请做了特殊处理，"),a("strong",[s._v("如果申请的数据大小为 0 将直接返回一个固定内存地址，不会走 Golang 内存管理的正常逻辑")]),s._v("，详见以下源码")]),s._v(" "),a("div",{staticClass:"language-auto line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//usr/local/go/src/runtime/malloc.go\n\n// Al Allocate an object of size bytes.\n// Sm Small objects are allocated from the per-P cache's free lists.\n// La Large objects (> 32 kB) are allocated straight from the heap.\nfunc mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer {\n// ……（省略部分代码）\n\nif size == 0 {\nreturn unsafe.Pointer(&zerobase)\n}\n\n//……（省略部分代码）\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上述代码可以看见，如果申请的 size 为 0，则直接 return 一个固定地址**"),a("code",[s._v("zerobase")]),s._v("**。所以在 68 种 Size Class 中，执行 newobject 时，会申请内存的 Size Class 为 67 种。在 Golang 中如[0]int、 struct{}所需要内存大小均是 0，这也是为什么很多开发者在通过 Channel 做同步时，发送一个 struct{}数据，因为不会申请任何内存，能够适当节省一部分内存空间。")]),s._v(" "),a("blockquote",[a("p",[s._v("golang 中[0]int、 struct{}等，全部的 0 内存对象分配，返回的都是一个固定的地址。")])]),s._v(" "),a("p",[s._v("max waste 为当前 Size Class 最大可能浪费的空间所占百分比计算方式，详见下图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-23.2e5fonubjpz4.webp",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_2-4-mcache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-mcache"}},[s._v("#")]),s._v(" 2.4 "),a("strong",[s._v("MCache")])]),s._v(" "),a("p",[s._v("mcache 与 TCMalloc 中的 ThreadCache 类似，但也有所不同。"),a("br"),s._v(" "),a("strong",[s._v("相同点")]),s._v("：都保存的是各种大小的 Span，并按 Span class 分类，小对象直接从此分配内存，起到了缓存的作用，并且可以无锁访问"),a("br"),s._v(" "),a("strong",[s._v("不同点")]),s._v("：TCMalloc 中是 1 个线程 1 个 ThreadCache，Go 中是 1 个 P 拥有 1 个 mcache，两者绑定关系的区别如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-24.2ps0808rvfw0.webp",alt:""}})]),s._v(" "),a("p",[s._v("如果将上图的 mcache 展开，来看 mcache 的内部构造，则具体的结构形式如下图所示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-25.26cta0l7qp8g.webp",alt:""}})]),s._v(" "),a("p",[s._v("当其中某个 Span Class 的 MSpan 已经没有可提供的 Object 时，MCache 则会向 MCentral 申请一个对应的 MSpan。"),a("strong",[s._v("mcache 在初始化时是没有任何 mspan 资源的，在使用过程中会动态地申请，不断地去填充 alloc[numSpanClasses]*mspan，通过双向链表连接")]),s._v("。")]),s._v(" "),a("p",[s._v("下面具体看一下 mcache 在源码中的定义：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//go:notinheap")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcache "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   tiny             "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//<16byte 申请小对象的起始地址")]),s._v("\n   tinyoffset       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//从起始地址tiny开始的偏移量")]),s._v("\n   local_tinyallocs "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//tiny对象分配的数量")]),s._v("\n\n   alloc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numSpanClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配的mspan list，其中numSpanClasses=67*2，索引是splanclassId")]),s._v("\n\n   stackcache "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumStackOrders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("stackfreelist "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈缓存")]),s._v("\n\n\n   local_largefree  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 大对象释放字节数")]),s._v("\n   local_nlargefree "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放的大对象数量")]),s._v("\n   local_nsmallfree "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumSizeClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每种规格小对象释放的个数")]),s._v("\n\n\n   flushGen "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//扫描计数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("strong",[s._v("MCache 中每个 Span Class 都只会对应一个 MSpan 对象")]),s._v("，不同 Span Class 的 MSpan 的总体长度不同，参考 runtime/sizeclasses.go 的标准规定划分。比如对于 Span Class 为 4 的 MSpan 来说，存放内存大小为 1Page，即 8KB。每个对外提供的 Object 大小为 16B，共存放 512 个 Object。其他 Span Class 的存放方式类似。")]),s._v(" "),a("p",[s._v("通过源码可以看到 MCache 通过 alloc[numSpanClasses]*mspan 管理了很多不同规格不同类型的 span，golang 对于**"),a("code",[s._v("[16B,32KB]")]),s._v("**的对象会使用这部分 span 进行内存分配，所有在这区间大小的对象都会从 alloc 这个数组里寻找。")]),s._v(" "),a("div",{staticClass:"language-auto line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var sizeclass uint8\n//确定规格\nif size <= smallSizeMax-8 {\n   sizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]\n} else {\n   sizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]\n}\nsize = uintptr(class_to_size[sizeclass])\nspc := makeSpanClass(sizeclass, noscan)\n//alloc中查到\nspan := c.alloc[spc]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("而对于更小的对象，我们叫它 tiny 对象，golang 会通过 tiny 和 tinyoffset 组合寻找位置分配内存空间，这样可以更好的节约空间，源码如下：")]),s._v(" "),a("div",{staticClass:"language-auto line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("off := c.tinyoffset\n//根据不同大小内存对齐\nif size&7 == 0 {\n   off = round(off, 8)\n} else if size&3 == 0 {\n   off = round(off, 4)\n} else if size&1 == 0 {\n   off = round(off, 2)\n}\nif off+size <= maxTinySize && c.tiny != 0 {\n   // tiny+偏移量\n   x = unsafe.Pointer(c.tiny + off)\n   c.tinyoffset = off + size\n   c.local_tinyallocs++\n   mp.mallocing = 0\n   releasem(mp)\n   return x\n}\n// 空间不足从alloc重新申请空间用于tiny对象分配\nspan := c.alloc[tinySpanClass]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h5",{attrs:{id:"_2-5-mcentral"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-mcentral"}},[s._v("#")]),s._v(" 2.5 "),a("strong",[s._v("MCentral")])]),s._v(" "),a("p",[s._v("MCentral 与 TCMalloc 中的 Central 概念依然相似。向 MCentral 申请 Span 是同样是需要加锁的。"),a("br"),s._v("\n当 MCache 的某个级别 Span 的内存被分配光时，它会向 MCentral 申请 1 个当前级别的 Span。")]),s._v(" "),a("p",[s._v("Goroutine、MCache、MCentral、MHeap 互相交换的内存单位是不同，"),a("strong",[s._v("其中协程逻辑层与 MCache 的内存交换单位是 Object，MCache 与 MCentral、MCentral 与 MHeap 的内存交换单位是 Span，MHeap 与操作系统的内存交换单位是 Page")]),s._v("。")]),s._v(" "),a("p",[s._v("MCentral 与 TCMalloc 中的 Central 不同的是："),a("strong",[s._v("CentralCache 是每个级别的 Span 有 1 个链表，mcache 是每个级别的 Span 有 2 个链表")]),s._v("。如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-26.30vyt6mqjwi0.webp",alt:""}})]),s._v(" "),a("p",[s._v("MCentral 属于 MHeap，MCentral 是各个规格的 mcentral 集合，实际上 1 个 mcentral 对应 1 个 Span Class，即 Span Class 个 mcentral 小内存管理单元。对应源码为:")]),s._v(" "),a("div",{staticClass:"language-auto line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type mheap struct {\n    ......\n    central [numSpanClasses]struct {\n        mcentral mcentral\n        pad      [cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize]byte\n    }\n    ......\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",[a("li",[a("strong",[s._v("NonEmpty Span List")]),a("br"),s._v(" "),a("strong",[s._v("表示还有可用空间的 Span 链表")]),s._v("。链表中的所有 Span 都至少有 1 个空闲的 Object 空间。如果 MCentral 上游 MCache 退还 Span，会将退还的 Span 加入到 NonEmpty Span List 链表中。")]),s._v(" "),a("li",[a("strong",[s._v("Empty Span List")]),a("br"),s._v(" "),a("strong",[s._v("表示没有可用空间的 Span 链表")]),s._v("。该链表上的 Span 都不确定是否存在空闲的 Object 空间。如果 MCentral 提供给一个 Span 给到上游 MCache，那么被提供的 Span 就会加入到 Empty List 链表中。")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意 在 Golang 1.16 版本之后，MCentral 中的 NonEmpty Span List 和 Empty Span List"),a("br"),s._v("\n均由链表管理改成集合管理，分别对应 Partial Span Set 和 Full Span Set。虽然存储的数据结构有变化，但是基本的作用和职责没有区别。")])]),s._v(" "),a("p",[s._v("下面是 MCentral 层级中其中一个 Size Class 级别的 MCentral 的定义 Golang 源代码（V1.14 版本）:")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//usr/local/go/src/runtime/mcentral.go  , Go V1.14")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Central list of free objects of a given size.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// go:notinheap")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcentral "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  lock      mutex      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//申请MCentral内存分配时需要加的锁")]),s._v("\n\n  spanclass spanClass "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当前哪个Size Class级别的")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list of spans with a free object, ie a nonempty free list")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 还有可用空间的Span 链表")]),s._v("\n  nonempty  mSpanList\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list of spans with no free objects (or cached in an mcache)")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有可用空间的Span链表，或者当前链表里的Span已经交给mcache")]),s._v("\n  empty     mSpanList\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nmalloc is the cumulative count of objects allocated from")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this mcentral, assuming all spans in mcaches are")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fully-allocated. Written atomically, read under STW.")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nmalloc是从该mcentral分配的对象的累积计数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 假设mcaches中的所有跨度都已完全分配。")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以原子方式书写，在STW下阅读。")]),s._v("\n  nmalloc "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("在 GolangV1.16 版本的相关 MCentral 结构代码如下：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//usr/local/go/src/runtime/mcentral.go  , Go V1.16+")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//…")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcentral "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mcentral对应的spanClass")]),s._v("\n  spanclass spanClass\n\n  partial  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("spanSet "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 维护全部空闲的Span集合")]),s._v("\n  full     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("spanSet "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 维护存在非空闲的Span集合")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//…")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("新版本的改进是将 List 变成了两个 Set 集合，Partial 集合与 NonEmpty Span List 责任类似，Full 集合与 Empty Span List 责任类似。可以看见 Partial 和 Full 都是一个[2]spanSet 类型，也就"),a("strong",[s._v("每个 Partial 和 Full 都各有两个 spanSet 集合，这是为了给 GC 垃圾回收来使用的，其中一个集合是已扫描的，另一个集合是未扫描的")]),s._v("。")]),s._v(" "),a("h5",{attrs:{id:"_2-6-mheap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-mheap"}},[s._v("#")]),s._v(" 2.6 "),a("strong",[s._v("MHeap")])]),s._v(" "),a("p",[s._v("Golang 内存管理的 MHeap 依然是继承 TCMalloc 的 PageHeap 设计。MHeap 的上游是 MCentral，MCentral 中的 Span 不够时会向 MHeap 申请。MHeap 的下游是操作系统，MHeap 的内存不够时会向操作系统的虚拟内存空间申请。访问 MHeap 获取内存依然是需要加锁的。"),a("br"),s._v("\nMHeap 是对内存块的管理对象，是通过 Page 为内存单元进行管理。那么用来详细管理每一系列 Page 的结构称之为一个 HeapArena，它们的逻辑层级关系如下图所示。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-28.58o8vxllvu0.webp",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("一个 HeapArena 占用内存 64MB，其中里面的内存的是一个一个的 mspan，当然最小单元依然是 Page，图中没有表示出 mspan，因为多个连续的 page 就是一个 mspan")]),s._v("。所有的 HeapArena 组成的集合是一个 arenas [1]*[4M]*heapArena 数组，运行时使用 arenas 管理所有的内存。")]),s._v(" "),a("p",[s._v("mheap 是 Golang 进程全局唯一的，所以访问依然加锁。图中又出现了 mcentral，因为"),a("strong",[s._v("mcentral 本也属于 mheap 中的一部分。只不过会优先从 MCentral 获取内存，如果没有 mcentral 会从 Arenas 中的某个 heapArena 获取 Page")]),s._v("。")]),s._v(" "),a("p",[s._v("heapArena 结构体如下：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" heapArena "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   bitmap "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("heapArenaBitmapBytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用于标记当前这个HeapArena的内存使用情况，1. 对应地址中是否存在过对象、对象中哪些地址包含指针，2. 是否被GC标记过。主要用于GC")]),s._v("\n   spans "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pagesPerArena"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  存放heapArena中的span指针地址")]),s._v("\n   pageInUse "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pagesPerArena "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存哪些spans处于mSpanInUse状态")]),s._v("\n   pageMarks "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pagesPerArena "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存哪些spans中包含被标记的对象")]),s._v("\n   pageSpecials "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pagesPerArena "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存哪些spans是特殊的")]),s._v("\n   checkmarks "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("checkmarksMap  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// debug.gccheckmark state")]),s._v("\n   zeroedBase "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//该arena第一页的第一个字节地址")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("根据 heapArena 结构体，我们可以了解到 mheap 内存空间的逻辑视图如下所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-29.13qays7g396o.webp",alt:""}})]),s._v(" "),a("p",[s._v("其中 arena 区域就是我们通常说的 heap, go 从 heap 分配的内存都在这个区域中。"),a("br"),s._v(" "),a("strong",[s._v("其中 spans 区域用于表示 arena 区中的某一页(Page)属于哪个 span，spans 区域中一个指针(8 byte)对应了 arena 区域中的一页(在 go 中一页=8KB)。所以 spans 的大小是 512GB / 页大小(8KB) * 指针大小(8 byte) = 512MB")]),s._v("。spans 区域和 arenas 区域的对应关系如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-30.2rlhg82hym40.webp",alt:""}})]),s._v(" "),a("p",[s._v("其中每个 HeapArean 包含一个 bitmap，其作用是用于标记当前这个 HeapArena 的内存使用情况。")]),s._v(" "),a("p",[s._v("1 个 bitmap 的逻辑结构图如下所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-31.62xym6qitow0.webp",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("1 个 bitmap 是 8bit，每一个指针大小的内存都会有两个 bit 分别表示是否应该继续扫描和是否包含指针，这样 1 个 byte 就会对应 arena 区域的四个指针大小的内存")]),s._v("。当前 HeapArena 中的所有 Page 均会被 bitmap 所标记，bitmap 的主要作用是服务于 GC 垃圾回收模块。")]),s._v(" "),a("p",[s._v("bitmap 中的 byte 和 arena 的对应关系从末尾开始, 也就是随着内存分配会向两边扩展")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-32.58inbs7yifk0.webp",alt:""}})]),s._v(" "),a("p",[s._v("MHeap 里面相关的数据结构和指针依赖关系，可以参考下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-33.4w2caez09xg0.webp",alt:""}})]),s._v(" "),a("p",[s._v("mheap 结构体如下：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mheap "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    lock  mutex    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//必须在系统堆栈上获得，否则当G持有锁时，堆栈增长，可能会自我死锁")]),s._v("\n    pages pageAlloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// page分配器数据结构")]),s._v("\n    sweepgen     "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录span的sweep及cache状态")]),s._v("\n    sweepDrained "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所有的span都已被清扫，或都正在被清扫")]),s._v("\n    sweepers     "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动的swepper数量")]),s._v("\n    allspans "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 曾经创建的所有mspans地址的切片，allspans的内存是手动管理的，可以随着堆的增长而重新分配和移动。")]),s._v("\n                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一般来说，allspans受到mheap_.lock的保护，它可以防止并发访问以及释放后备存储。")]),s._v("\n                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在STW期间的访问可能不会持有锁，但必须确保访问周围不能发生分配（因为这可能会释放支持存储）。")]),s._v("\n    pagesInUse         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pages所属的spans处于状态mSpanInUse; 原子式更新")]),s._v("\n    pagesSwept         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 本周期内被清扫的pages数; 原子式更新")]),s._v("\n    pagesSweptBasis    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 被用作Proportional sweep模式原点的pagesSwept; 原子式更新")]),s._v("\n    sweepHeapLiveBasis "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// gcController.heapLive的值，作为扫描率的原点；带锁写入，不带锁读取。")]),s._v("\n    sweepPagesPerByte  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Proportional sweep比例; 写时有锁，读时无锁")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO(austin): pagesInUse should be a uintptr, but the 386 compiler can't 8-byte align fields.")]),s._v("\n    scavengeGoal "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 维持的总的保留堆内存量（运行时试图通过向操作系统返回内存来维持该内存量，该内存量由heapRetained衡量）。")]),s._v("\n    reclaimIndex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下一个要回收的page在allArenas中的索引")]),s._v("\n    reclaimCredit "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arenas是*heapArena的map. 它指向整个可用的虚拟地址空间的每一个arena帧的堆的元数据。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这是一个两级映射，由一个L1映射和可能的许多L2映射组成。当有大量的arena时，这可以节省空间")]),s._v("\n    arenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" arenaL1Bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" arenaL2Bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("heapArena\n    heapArenaAlloc linearAlloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用于分配heapArena对象的预留空间。这只在32位上使用，我们预先保留这个空间以避免与堆本身交错。")]),s._v("\n    arenaHints "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arenaHint "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arenaHints是一个地址列表，用于标记哪里的heap arenas需要扩容")]),s._v("\n    arena linearAlloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是一个预先保留的空间，用于分配heap arenas。只用在32位操作系统")]),s._v("\n\n    allArenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("arenaIdx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所有arena序号集合，可以根据arenaIdx算出对应arenas中的那一个heapArena")]),s._v("\n    sweepArenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("arenaIdx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepArenas是在扫描周期开始时对所有Arenas的快照，通过禁用抢占可以安全读取")]),s._v("\n    markArenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("arenaIdx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// markArenas是在标记周期开始时对所有Arenas的快照，由于allArenas只可向后追加，并且标记不会修改该切片内容，所以可以安全读取")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//curArena是堆当前正在扩容的区域，curArena总是与physPageSize对齐")]),s._v("\n    curArena "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// central 是存放small size classes的列表")]),s._v("\n    central "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numSpanClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        mcentral mcentral\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pad确保mcentrals间隔CacheLinePadSize字节，以便每个mcentral.lock得到它自己的缓存行")]),s._v("\n        pad      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mcentral"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    spanalloc             fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for span*")]),s._v("\n    cachealloc            fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for mcache*")]),s._v("\n    specialfinalizeralloc fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for specialfinalizer*")]),s._v("\n    specialprofilealloc   fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for specialprofile*")]),s._v("\n    specialReachableAlloc fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for specialReachable")]),s._v("\n    speciallock           mutex    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lock for special record allocators.")]),s._v("\n    arenaHintAlloc        fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for arenaHints")]),s._v("\n\n    unused "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("specialfinalizer "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// never set, just here to force the specialfinalizer type into DWARF")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])]),a("p",[s._v("arenaHint 结构体为：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" arenaHint "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    addr "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 为指向的对应heapArena首地址。")]),s._v("\n    down "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 为当前的heapArena是否可以扩容。")]),s._v("\n    next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arenaHint "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向下一个heapArena所对应的ArenaHint首地址。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3-内存分配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存分配规则"}},[s._v("#")]),s._v(" 3. "),a("strong",[s._v("内存分配规则")])]),s._v(" "),a("p",[s._v("介绍完内存管理基本概念，我们再来总结一下内存分配规则，流程图如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/nc-34.ma7aqrh2zjk.webp",alt:""}})]),s._v(" "),a("h5",{attrs:{id:"_3-1-tiny-对象分配流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tiny-对象分配流程"}},[s._v("#")]),s._v(" 3.1 "),a("strong",[s._v("Tiny 对象分配流程")])]),s._v(" "),a("ol",[a("li",[s._v("判断对象大小是否小于 maxSmallSize=32KB，如果小于 32KB 则进入 Tiny 对象或小对象申请流程，否则进入大对象申请流程。")]),s._v(" "),a("li",[s._v("判断对象大小是否小于 maxTinySize=16B 并且对象中是否包含指针，如果大于 16B 或包含指针，则进入小对象申请流程，否则进入 Tiny 对象申请流程")]),s._v(" "),a("li",[s._v("Tiny 对象申请流程后，会先获取 mcache 目前的 tinyoffset，再根据申请 tiny 对象的大小及 mcache.tinyoffset 值，进行内存对齐，计算出满足内存对齐后的对象插入位置 offset")]),s._v(" "),a("li",[s._v("如果从插入位置 offset 插入对象后，不超出 16B，并且存在待分配的 tiny 空间，则将对象填充到该 tiny 空间，并将地址返回给 M，结束内存申请")]),s._v(" "),a("li",[s._v("如果当前的 tiny 空间不足，则通过 nextFreeFast(span)查找 span 中一个可用对象地址，存在则返回地址，并结束内存申请")]),s._v(" "),a("li",[s._v("如果 span 中不存在一个可用对象，则调用 mcache.nextFree(tinySpanClass)从 mcentral 申请 1 个相同规格的 msapn。申请成功则结束流程")])]),s._v(" "),a("h5",{attrs:{id:"_3-2-小对象分配流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-小对象分配流程"}},[s._v("#")]),s._v(" 3.2 "),a("strong",[s._v("小对象分配流程")])]),s._v(" "),a("ol",[a("li",[s._v("进入小对象申请流程后，通过 mcache.alloc(spc)获取 1 个指定规格的 mspan")]),s._v(" "),a("li",[s._v("通过 nextFreeFast(span)查找 span 中一个可用对象地址，存在则返回地址给协程逻辑层 P，P 得到内存空间，流程结束")]),s._v(" "),a("li",[s._v("如果不存在可用对象，则通过 mcache.nextFree(tinySpanClass)中 mcache.refill(spc)从 mcentral 申请 1 个相同规格的 msapn"),a("br"),s._v("\n4.mcache.refill(spc)中，会首先尝试通过 mcentral 的 noempty list 获取 mspan，获取不到则在尝试通过 mcentral 的 empty list 获取 mspan（1.16 之后，通过 mcentral.cacheSpan()从 partial set 获取 mspan，获取不到则从 full set 获取可回收的 mspan）。mcache 成功获取 mcentral 返回的 mspan 后，返回可用对象地址，结束申请流程")]),s._v(" "),a("li",[s._v("mcache 中 empty List（1.16 之后，full set）也没有可回收的 mspan，则会调用 mcache.grow()函数，从 mheap 中申请内存")]),s._v(" "),a("li",[s._v("mheap 收到内存请求从其中一个 heapArena 从取出一部分 pages 返回给 mcentral；当 mheap 没有足够的内存时，mheap 会向操作系统申请内存，将申请的内存也保存到 heapArena 中的 mspan 中。mcentral 将从 mheap 获取的由 Pages 组成的 mspan 添加到对应的 span class 链表或集合中")]),s._v(" "),a("li",[s._v("最后协程业务逻辑层得到该对象申请到的内存，流程结束")])]),s._v(" "),a("h5",{attrs:{id:"_3-3-大对象分配流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-大对象分配流程"}},[s._v("#")]),s._v(" 3.3 "),a("strong",[s._v("大对象分配流程")])]),s._v(" "),a("ol",[a("li",[s._v("进入大对象分配流程后，会调用 mcache.allocLarge()方法申请大对象")]),s._v(" "),a("li",[s._v("mcache.allocLarge()中主要的 mspan 申请链路为：mheap.alloc -> mheap.allocSpan，mheap.allocSpan 为申请 mspan 的核心方法。mheap.allocSpan 会首先判断申请的 page 数是否小于 P.pageCache 的最大 page 数，如果 P.pageCache 满足需要，则会从 P.mspancache 获取 mspan 地址给 P，流程结束")]),s._v(" "),a("li",[s._v("P.pageCache 不足，则对 mheap 加锁，从 mheap.pageAlloc 这种 Radix tree（基数树）数据结构中查找可用的 page，协程逻辑层 P 得到内存，流程结束")]),s._v(" "),a("li",[s._v("mheap.pageAlloc 中查找不存在可用的 page，则调用 mheap.grow()向操作系统申请内存。申请成功后，再次从 mheap.pageAlloc 中查找可以 page，P 得到内存后，流程结束")])])])}),[],!1,null,null,null);a.default=e.exports}}]);