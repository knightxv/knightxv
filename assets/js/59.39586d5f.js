(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{380:function(e,t,a){"use strict";a.r(t);var r=a(4),v=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"raft共识算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raft共识算法"}},[e._v("#")]),e._v(" Raft共识算法")]),e._v(" "),t("p",[e._v("一个 Raft 集群包括若干服务器，以典型的 5 服务器集群举例。在任意的时间，每个服务器一定会处于以下三个状态中的一个：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Leader")]),e._v("：负责发起心跳，响应客户端，创建日志，同步日志。")]),e._v(" "),t("li",[t("code",[e._v("Candidate")]),e._v("：Leader 选举过程中的临时角色，由 Follower 转化而来，发起投票参与竞选。")]),e._v(" "),t("li",[t("code",[e._v("Follower")]),e._v("：接受 Leader 的心跳和日志同步数据，投票给 Candidate。")])]),e._v(" "),t("p",[e._v("在正常的情况下，只有一个服务器是 Leader，剩下的服务器是 Follower。Follower 是被动的，它们不会发送任何请求，只是响应来自 Leader 和 Candidate 的请求。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/paxos-server-state.png",alt:"img"}})]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("图-2：服务器的状态\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/paxos-term.png",alt:"img"}})]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("图-3：任期\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("如图 3 所示，raft 算法将时间划分为任意长度的任期（term），任期用连续的数字表示，看作当前 term 号。每一个任期的开始都是一次选举，在选举开始时，一个或多个 Candidate 会尝试成为 Leader。如果一个 Candidate 赢得了选举，它就会在该任期内担任 Leader。如果没有选出 Leader，将会开启另一个任期，并立刻开始下一次选举。raft 算法保证在给定的一个任期最少要有一个 Leader。")]),e._v(" "),t("p",[e._v("每个节点都会存储当前的 term 号，当服务器之间进行通信时会交换当前的 term 号；如果有服务器发现自己的 term 号比其他人小，那么他会更新到较大的 term 值。如果一个 Candidate 或者 Leader 发现自己的 term 过期了，他会立即退回成 Follower。如果一台服务器收到的请求的 term 号是过期的，那么它会拒绝此次请求。")]),e._v(" "),t("h1",{attrs:{id:"日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[e._v("#")]),e._v(" 日志")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("entry")]),e._v("：每一个事件成为 entry，只有 Leader 可以创建 entry。entry 的内容为"),t("code",[e._v("<term,index,cmd>")]),e._v("其中 cmd 是可以应用到状态机的操作。")]),e._v(" "),t("li",[t("code",[e._v("log")]),e._v("：由 entry 构成的数组，每一个 entry 都有一个表明自己在 log 中的 index。只有 Leader 才可以改变其他节点的 log。entry 总是先被 Leader 添加到自己的 log 数组中，然后再发起共识请求，获得同意后才会被 Leader 提交给状态机。Follower 只能从 Leader 获取新日志和当前的 commitIndex，然后把对应的 entry 应用到自己的状态机中。")])]),e._v(" "),t("h1",{attrs:{id:"领导人选举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#领导人选举"}},[e._v("#")]),e._v(" 领导人选举")]),e._v(" "),t("p",[e._v("raft 使用心跳机制来触发 Leader 的选举。")]),e._v(" "),t("p",[e._v("如果一台服务器能够收到来自 Leader 或者 Candidate 的有效信息，那么它会一直保持为 Follower 状态，并且刷新自己的 electionElapsed，重新计时。")]),e._v(" "),t("p",[e._v("Leader 会向所有的 Follower 周期性发送心跳来保证自己的 Leader 地位。如果一个 Follower 在一个周期内没有收到心跳信息，就叫做选举超时，然后它就会认为此时没有可用的 Leader，并且开始进行一次选举以选出一个新的 Leader。")]),e._v(" "),t("p",[e._v("为了开始新的选举，Follower 会自增自己的 term 号并且转换状态为 Candidate。然后他会向所有节点发起 RequestVoteRPC 请求， Candidate 的状态会持续到以下情况发生：")]),e._v(" "),t("ul",[t("li",[e._v("赢得选举")]),e._v(" "),t("li",[e._v("其他节点赢得选举")]),e._v(" "),t("li",[e._v("一轮选举结束，无人胜出")])]),e._v(" "),t("p",[e._v("赢得选举的条件是：一个 Candidate 在一个任期内收到了来自集群内的多数选票"),t("code",[e._v("（N/2+1）")]),e._v("，就可以成为 Leader。")]),e._v(" "),t("p",[e._v("在 Candidate 等待选票的时候，它可能收到其他节点声明自己是 Leader 的心跳，此时有两种情况：")]),e._v(" "),t("ul",[t("li",[e._v("该 Leader 的 term 号大于等于自己的 term 号，说明对方已经成为 Leader，则自己回退为 Follower。")]),e._v(" "),t("li",[e._v("该 Leader 的 term 号小于自己的 term 号，那么会拒绝该请求并让该节点更新 term。")])]),e._v(" "),t("p",[e._v("由于可能同一时刻出现多个 Candidate，导致没有 Candidate 获得大多数选票，如果没有其他手段来重新分配选票的话，那么可能会无限重复下去。")]),e._v(" "),t("p",[e._v("raft 使用了随机的选举超时时间来避免上述情况。每一个 Candidate 在发起选举后，都会随机化一个新的枚举超时时间，这种机制使得各个服务器能够分散开来，在大多数情况下只有一个服务器会率先超时；它会在其他服务器超时之前赢得选举。")]),e._v(" "),t("h1",{attrs:{id:"日志复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志复制"}},[e._v("#")]),e._v(" 日志复制")]),e._v(" "),t("p",[e._v("一旦选出了 Leader，它就开始接受客户端的请求。每一个客户端的请求都包含一条需要被复制状态机（"),t("code",[e._v("Replicated State Mechine")]),e._v("）执行的命令。")]),e._v(" "),t("p",[e._v("Leader 收到客户端请求后，会生成一个 entry，包含"),t("code",[e._v("<index,term,cmd>")]),e._v("，再将这个 entry 添加到自己的日志末尾后，向所有的节点广播该 entry，要求其他服务器复制这条 entry。")]),e._v(" "),t("p",[e._v("如果 Follower 接受该 entry，则会将 entry 添加到自己的日志后面，同时返回给 Leader 同意。")]),e._v(" "),t("p",[e._v("如果 Leader 收到了多数的成功响应，Leader 会将这个 entry 应用到自己的状态机中，之后可以成为这个 entry 是 committed 的，并且向客户端返回执行结果。")]),e._v(" "),t("p",[e._v("raft 保证以下两个性质：")]),e._v(" "),t("ul",[t("li",[e._v("在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们一定有相同的 cmd")]),e._v(" "),t("li",[e._v("在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们前面的 entry 也一定相同")])]),e._v(" "),t("p",[e._v("通过“仅有 Leader 可以生存 entry”来保证第一个性质，第二个性质需要一致性检查来进行保证。")]),e._v(" "),t("p",[e._v("一般情况下，Leader 和 Follower 的日志保持一致，然后，Leader 的崩溃会导致日志不一样，这样一致性检查会产生失败。Leader 通过强制 Follower 复制自己的日志来处理日志的不一致。这就意味着，在 Follower 上的冲突日志会被领导者的日志覆盖。")]),e._v(" "),t("p",[e._v("为了使得 Follower 的日志和自己的日志一致，Leader 需要找到 Follower 与它日志一致的地方，然后删除 Follower 在该位置之后的日志，接着把这之后的日志发送给 Follower。")]),e._v(" "),t("p",[t("code",[e._v("Leader")]),e._v(" 给每一个"),t("code",[e._v("Follower")]),e._v(" 维护了一个 "),t("code",[e._v("nextIndex")]),e._v("，它表示 "),t("code",[e._v("Leader")]),e._v(" 将要发送给该追随者的下一条日志条目的索引。当一个 "),t("code",[e._v("Leader")]),e._v(" 开始掌权时，它会将 "),t("code",[e._v("nextIndex")]),e._v(" 初始化为它的最新的日志条目索引数+1。如果一个 "),t("code",[e._v("Follower")]),e._v(" 的日志和 "),t("code",[e._v("Leader")]),e._v(" 的不一致，"),t("code",[e._v("AppendEntries")]),e._v(" 一致性检查会在下一次 "),t("code",[e._v("AppendEntries RPC")]),e._v(" 时返回失败。在失败之后，"),t("code",[e._v("Leader")]),e._v(" 会将 "),t("code",[e._v("nextIndex")]),e._v(" 递减然后重试 "),t("code",[e._v("AppendEntries RPC")]),e._v("。最终 "),t("code",[e._v("nextIndex")]),e._v(" 会达到一个 "),t("code",[e._v("Leader")]),e._v(" 和 "),t("code",[e._v("Follower")]),e._v(" 日志一致的地方。这时，"),t("code",[e._v("AppendEntries")]),e._v(" 会返回成功，"),t("code",[e._v("Follower")]),e._v(" 中冲突的日志条目都被移除了，并且添加所缺少的上了 "),t("code",[e._v("Leader")]),e._v(" 的日志条目。一旦 "),t("code",[e._v("AppendEntries")]),e._v(" 返回成功，"),t("code",[e._v("Follower")]),e._v(" 和 "),t("code",[e._v("Leader")]),e._v(" 的日志就一致了，这样的状态会保持到该任期结束。")]),e._v(" "),t("h1",{attrs:{id:"安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[e._v("#")]),e._v(" 安全性")]),e._v(" "),t("h2",{attrs:{id:"选举限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选举限制"}},[e._v("#")]),e._v(" 选举限制")]),e._v(" "),t("p",[e._v("Leader 需要保证自己存储全部已经提交的日志条目。这样才可以使日志条目只有一个流向：从 Leader 流向 Follower，Leader 永远不会覆盖已经存在的日志条目。")]),e._v(" "),t("p",[e._v("每个 Candidate 发送 RequestVoteRPC 时，都会带上最后一个 entry 的信息。所有节点收到投票信息时，会对该 entry 进行比较，如果发现自己的更新，则拒绝投票给该 Candidate。")]),e._v(" "),t("p",[e._v("判断日志新旧的方式：如果两个日志的 term 不同，term 大的更新；如果 term 相同，更长的 index 更新。")]),e._v(" "),t("h2",{attrs:{id:"节点崩溃"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点崩溃"}},[e._v("#")]),e._v(" 节点崩溃")]),e._v(" "),t("p",[e._v("如果 Leader 崩溃，集群中的节点在 electionTimeout 时间内没有收到 Leader 的心跳信息就会触发新一轮的选主，在选主期间整个集群对外是不可用的。")]),e._v(" "),t("p",[e._v("如果 Follower 和 Candidate 崩溃，处理方式会简单很多。之后发送给它的 RequestVoteRPC 和 AppendEntriesRPC 会失败。由于 raft 的所有请求都是幂等的，所以失败的话会无限的重试。如果崩溃恢复后，就可以收到新的请求，然后选择追加或者拒绝 entry。")]),e._v(" "),t("h2",{attrs:{id:"时间与可用性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间与可用性"}},[e._v("#")]),e._v(" 时间与可用性")]),e._v(" "),t("p",[e._v("raft 的要求之一就是安全性不依赖于时间：系统不能仅仅因为一些事件发生的比预想的快一些或者慢一些就产生错误。为了保证上述要求，最好能满足以下的时间条件：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("broadcastTime << electionTimeout << MTBF\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("ul",[t("li",[t("code",[e._v("broadcastTime")]),e._v("：向其他节点并发发送消息的平均响应时间；")]),e._v(" "),t("li",[t("code",[e._v("electionTimeout")]),e._v("：选举超时时间；")]),e._v(" "),t("li",[t("code",[e._v("MTBF(mean time between failures)")]),e._v("：单台机器的平均健康时间；")])]),e._v(" "),t("p",[t("code",[e._v("broadcastTime")]),e._v("应该比"),t("code",[e._v("electionTimeout")]),e._v("小一个数量级，为的是使"),t("code",[e._v("Leader")]),e._v("能够持续发送心跳信息（heartbeat）来阻止"),t("code",[e._v("Follower")]),e._v("开始选举；")]),e._v(" "),t("p",[t("code",[e._v("electionTimeout")]),e._v("也要比"),t("code",[e._v("MTBF")]),e._v("小几个数量级，为的是使得系统稳定运行。当"),t("code",[e._v("Leader")]),e._v("崩溃时，大约会在整个"),t("code",[e._v("electionTimeout")]),e._v("的时间内不可用；我们希望这种情况仅占全部时间的很小一部分。")]),e._v(" "),t("p",[e._v("由于"),t("code",[e._v("broadcastTime")]),e._v("和"),t("code",[e._v("MTBF")]),e._v("是由系统决定的属性，因此需要决定"),t("code",[e._v("electionTimeout")]),e._v("的时间。")]),e._v(" "),t("p",[e._v("一般来说，broadcastTime 一般为 "),t("code",[e._v("0.5～20ms")]),e._v("，electionTimeout 可以设置为 "),t("code",[e._v("10～500ms")]),e._v("，MTBF 一般为一两个月。")]),e._v(" "),t("h1",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("ul",[t("li",[e._v("https://tanxinyu.work/raft/")]),e._v(" "),t("li",[e._v("https://github.com/OneSizeFitsQuorum/raft-thesis-zh_cn/blob/master/raft-thesis-zh_cn.md")]),e._v(" "),t("li",[e._v("https://github.com/ongardie/dissertation/blob/master/stanford.pdf")]),e._v(" "),t("li",[e._v("https://knowledge-sharing.gitbooks.io/raft/content/chapter5.html")])])])}),[],!1,null,null,null);t.default=v.exports}}]);