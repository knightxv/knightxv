(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{373:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[s._v("#")]),s._v(" 分布式锁")]),s._v(" "),t("p",[s._v("对于单机多线程来说，在 GO 中，我们通常使用 "),t("code",[s._v("Mutex")]),s._v(" 和 "),t("code",[s._v("Channel")]),s._v("、自带的 "),t("strong",[s._v("本地锁")]),s._v(" 来控制一个进程内的多个线程对本地共享资源的访问。")]),s._v(" "),t("p",[s._v("下面是我对本地锁画的一张示意图。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230119/s-1.1utscljlyz40.webp",alt:""}})]),s._v(" "),t("p",[s._v("从图中可以看出，这些线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到本地锁访问共享资源。")]),s._v(" "),t("p",[s._v("分布式系统下，不同的服务/客户端通常运行在独立的进程上。如果多个进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，"),t("strong",[s._v("分布式锁")]),s._v(" 就诞生了。")]),s._v(" "),t("p",[s._v("举个例子：系统的订单服务一共部署了 3 份，都对外提供服务。用户下订单之前需要检查库存，为了防止超卖，这里需要加锁以实现对检查库存操作的同步访问。由于订单服务位于不同的 进程中，本地锁在这种情况下就没办法正常工作了。我们需要用到分布式锁，这样的话，即使多个线程不在同一个进程中也能获取到同一把锁，进而实现共享资源的互斥访问。")]),s._v(" "),t("p",[s._v("一个最基本的分布式锁需要满足：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("互斥")]),s._v(" ：任意一个时刻，锁只能被一个线程持有；")]),s._v(" "),t("li",[t("strong",[s._v("高可用")]),s._v(" ：锁服务是高可用的。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。")]),s._v(" "),t("li",[t("strong",[s._v("可重入")]),s._v("：一个节点获取了锁之后，还可以再次获取锁。")])]),s._v(" "),t("p",[s._v("通常情况下，我们一般会选择基于 Redis、ZooKeeper、ETCD 实现分布式锁，Redis 用的要更多一点，我这里也以 Redis 为例介绍分布式锁的实现。")]),s._v(" "),t("h2",{attrs:{id:"基于-redis-实现分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于-redis-实现分布式锁"}},[s._v("#")]),s._v(" 基于 Redis 实现分布式锁")]),s._v(" "),t("h3",{attrs:{id:"如何基于-redis-实现一个最简易的分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何基于-redis-实现一个最简易的分布式锁"}},[s._v("#")]),s._v(" 如何基于 Redis 实现一个最简易的分布式锁？")]),s._v(" "),t("p",[s._v("不论是实现锁还是分布式锁，核心都在于“互斥”。")]),s._v(" "),t("p",[s._v("在 Redis 中， "),t("code",[s._v("SETNX")]),s._v(" 命令是可以帮助我们实现互斥。"),t("code",[s._v("SETNX")]),s._v(" 即 "),t("strong",[s._v("SET")]),s._v(" if "),t("strong",[s._v("N")]),s._v("ot e"),t("strong",[s._v("X")]),s._v("ists ，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， "),t("code",[s._v("SETNX")]),s._v(" 啥也不做。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SETNX lockKey uniqueValue\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SETNX lockKey uniqueValue\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("释放锁的话，直接通过 "),t("code",[s._v("DEL")]),s._v(" 命令删除对应的 key 即可。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" DEL lockKey\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("为了误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。")]),s._v(" "),t("p",[s._v("选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。")]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" 释放锁时，先比较锁对应的 value 值是否相等，避免锁的误释放\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"get"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ARGV"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"del"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这是一种最简易的 Redis 分布式锁实现，实现方式比较简单，性能也很高效。不过，这种方式实现分布式锁存在一些问题。就比如应用程序遇到一些问题比如释放锁的逻辑突然挂掉，可能会导致锁无法被释放，进而造成共享资源无法再被其他线程/进程访问。")]),s._v(" "),t("h3",{attrs:{id:"为什么要给锁设置一个过期时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要给锁设置一个过期时间"}},[s._v("#")]),s._v(" 为什么要给锁设置一个过期时间？")]),s._v(" "),t("p",[s._v("为了避免锁无法被释放，我们可以想到的一个解决办法就是： "),t("strong",[s._v("给这个 key（也就是锁） 设置一个过期时间")]),s._v(" 。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" SET lockKey uniqueValue EX "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" NX\nOK\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("lockKey")]),s._v(" ：加锁的锁名；")]),s._v(" "),t("li",[t("strong",[s._v("uniqueValue")]),s._v(" ：能够唯一标示锁的随机字符串；")]),s._v(" "),t("li",[t("strong",[s._v("NX")]),s._v(" ：只有当 lockKey 对应的 key 值不存在的时候才能 SET 成功；")]),s._v(" "),t("li",[t("strong",[s._v("EX")]),s._v(" ：过期时间设置（秒为单位）EX 3 标示这个锁有一个 3 秒的自动过期时间。与 EX 对应的是 PX（毫秒为单位），这两个都是过期时间设置。")])]),s._v(" "),t("p",[t("strong",[s._v("一定要保证设置指定 key 的值和过期时间是一个原子操作！！！")]),s._v(" 不然的话，依然可能会出现锁无法被释放的问题。")]),s._v(" "),t("p",[s._v("这样确实可以解决问题，不过，这种解决办法同样存在漏洞："),t("strong",[s._v("如果操作共享资源的时间大于过期时间，就会出现锁提前过期的问题，进而导致分布式锁直接失效。如果锁的超时时间设置过长，又会影响到性能。")])]),s._v(" "),t("p",[s._v("你或许在想： "),t("strong",[s._v("如果操作共享资源的操作还未完成，锁过期时间能够自己续期就好了！")])]),s._v(" "),t("h3",{attrs:{id:"如何实现锁的优雅续期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现锁的优雅续期"}},[s._v("#")]),s._v(" 如何实现锁的优雅续期？")]),s._v(" "),t("p",[s._v("默认情况下，每过 10 秒，看门狗就会执行续期操作，将锁的超时时间设置为 30 秒。看门狗续期前也会先判断是否需要执行续期操作，需要才会执行续期，否则取消续期操作。")]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 判断是否为持锁线程，如果是就执行续期操作，就锁的过期时间设置为 30s（默认）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hexists'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ARGV"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\nredis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pexpire'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ARGV"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"如何实现可重入锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现可重入锁"}},[s._v("#")]),s._v(" 如何实现可重入锁？")]),s._v(" "),t("p",[s._v("所谓可重入锁指的是在一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法即可重入 ，而无需重新获得锁。")]),s._v(" "),t("p",[t("strong",[s._v("不可重入的分布式锁基本可以满足绝大部分业务场景了，一些特殊的场景可能会需要使用可重入的分布式锁。")])]),s._v(" "),t("p",[s._v("可重入分布式锁的实现核心思路是线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。为此，我们可以为每个锁关联一个可重入计数器和一个占有它的线程。当可重入计数器大于 0 时，则锁被占有，需要判断占有该锁的线程和请求获取锁的线程是否为同一个。")]),s._v(" "),t("h3",{attrs:{id:"redis-如何解决集群情况下分布式锁的可靠性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-如何解决集群情况下分布式锁的可靠性"}},[s._v("#")]),s._v(" Redis 如何解决集群情况下分布式锁的可靠性？")]),s._v(" "),t("p",[s._v("为了避免单点故障，生产环境下的 Redis 服务通常是集群化部署的。")]),s._v(" "),t("p",[s._v("Redis 集群下，上面介绍到的分布式锁的实现会存在一些问题。由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。")]),s._v(" "),t("p",[s._v("Redlock 算法的思想是让客户端向 Redis 集群中的多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。")]),s._v(" "),t("p",[s._v("即使部分 Redis 节点出现问题，只要保证 Redis 集群中有半数以上的 Redis 节点可用，分布式锁服务就是正常的。")]),s._v(" "),t("p",[s._v("Redlock 是直接操作 Redis 节点的，并不是通过 Redis 集群操作的，这样才可以避免 Redis 集群主从切换导致的锁丢失问题。")]),s._v(" "),t("p",[s._v("Redlock 实现比较复杂，性能比较差，发生时钟变迁的情况下还存在安全性隐患。《数据密集型应用系统设计》一书的作者 Martin Kleppmann 曾经专门发文（"),t("a",{attrs:{href:"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("How to do distributed locking - Martin Kleppmann - 2016open in new window"),t("OutboundLink")],1),s._v("）怼过 Redlock，他认为这是一个很差的分布式锁实现。感兴趣的朋友可以看看"),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3NjU3NTkwMQ==&mid=2247505097&idx=1&sn=5c03cb769c4458350f4d4a321ad51f5a&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis 锁从面试连环炮聊到神仙打架 open in new window"),t("OutboundLink")],1),s._v("这篇文章，有详细介绍到 antirez 和 Martin Kleppmann 关于 Redlock 的激烈辩论。")]),s._v(" "),t("p",[s._v("实际项目中不建议使用 Redlock 算法，成本和收益不成正比。")]),s._v(" "),t("p",[s._v("如果不是非要实现绝对可靠的分布式锁的话，其实单机版 Redis 就完全够了，实现简单，性能也非常高。如果你必须要实现一个绝对可靠的分布式锁的话，可以基于 Zookeeper 来做，只是性能会差一些。")])])}),[],!1,null,null,null);t.default=e.exports}}]);