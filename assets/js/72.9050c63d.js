(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{394:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http1-0、1-1、2-0-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、1-1、2-0-的区别"}},[t._v("#")]),t._v(" http1.0、1.1、2.0 的区别")]),t._v(" "),a("h2",{attrs:{id:"http-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),a("p",[t._v("默认使用短连接，每次请求都需要建立 TCP 连接。服务完成立即断开，开销大；")]),t._v(" "),a("p",[t._v("错误状态响应码少；")]),t._v(" "),a("p",[t._v("不支持断点续传。它可以设置 Connection: keep-alive 这个字段，强制开启长连接。")]),t._v(" "),a("h2",{attrs:{id:"http-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),a("p",[t._v("默认长连接，即 TCP 连接默认不关闭，可以被多个请求复用。\n分块传输编码，即服务端每产生一块数据，就发送一块，用” 流模式” 取代” 缓存模式”。")]),t._v(" "),a("p",[t._v("管道机制，即在同一个 TCP 连接里面，客户端可以同时发送多个请求。")]),t._v(" "),a("h2",{attrs:{id:"http-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" HTTP/2.0")]),t._v(" "),a("p",[t._v("二进制协议，1.1 版本的头信息是文本（ASCII 编码），数据体可以是文本或者二进制；2.0 中，头信息和数据体都是二进制，实现方便，健壮性更好。")]),t._v(" "),a("p",[t._v("完全多路复用，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应。")]),t._v(" "),a("p",[t._v("报头压缩：HTTP 协议不带有状态，每次请求都必须附上所有信息。Http/2.0 引入了头信息压缩机制，使用 gzip 或 compress 压缩后再发送，同时通信的双方各自缓存一份 header fields 表，避免了 header 的重复传输。")]),t._v(" "),a("p",[t._v("服务端推送：允许服务器未经请求，主动向客户端发送资源。")])])}),[],!1,null,null,null);a.default=r.exports}}]);