(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{344:function(t,a,s){"use strict";s.r(a);var v=s(4),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"go-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-垃圾回收"}},[t._v("#")]),t._v(" Go 垃圾回收")]),t._v(" "),a("p",[t._v("本节会详细介绍 Go 语言运行时系统中垃圾收集器的设计与实现原理,从 Go 语言的 v1.0 版本开始分析其演进过程，还会深入源代码分析垃圾收集器的工作原理。")]),t._v(" "),a("h2",{attrs:{id:"传统的标记清除算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统的标记清除算法"}},[t._v("#")]),t._v(" 传统的标记清除算法")]),t._v(" "),a("p",[t._v("标记清除（Mark-Sweep）算法是最常见的垃圾收集算法，标记清除收集器是跟踪式垃圾收集器，其执行过程可以分成标记（Mark）和清除（Sweep）两个阶段：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("标记阶段")]),t._v(" "),a("p",[t._v("从根对象出发查找并标记堆中所有存活的对象；")])]),t._v(" "),a("li",[a("p",[t._v("清除阶段")]),t._v(" "),a("p",[t._v("遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表；")])])]),t._v(" "),a("h3",{attrs:{id:"标记阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记阶段"}},[t._v("#")]),t._v(" 标记阶段")]),t._v(" "),a("p",[t._v("如下图所示，内存空间中包含多个对象，我们从根对象出发依次遍历对象的子对象并将从根节点可达的对象都标记成存活状态，即 A、C 和 D 三个对象，剩余的 B、E 和 F 三个对象因为从根节点不可达，所以会被当做垃圾：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-1.3zag3kxl7ns0.webp",alt:"标记清除的标记阶段"}})]),t._v(" "),a("h3",{attrs:{id:"清除阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除阶段"}},[t._v("#")]),t._v(" 清除阶段")]),t._v(" "),a("p",[t._v("标记阶段结束后会进入清除阶段，在该阶段中收集器会依次遍历堆中的所有对象，释放其中没有被标记的 B、E 和 F 三个对象并将新的空闲内存空间以链表的结构串联起来，方便内存分配器的使用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-2.77uho0ae9s80.webp",alt:"标记清除的清除阶段"}})]),t._v(" "),a("h3",{attrs:{id:"弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弊端"}},[t._v("#")]),t._v(" 弊端")]),t._v(" "),a("p",[t._v("这里介绍的是最传统的标记清除算法，垃圾收集器从垃圾收集的根对象出发，递归遍历这些对象指向的子对象并将所有可达的对象标记成存活；标记阶段结束后，垃圾收集器会依次遍历堆中的对象并清除其中的垃圾，整个过程需要标记对象的存活状态，用户程序在垃圾收集的过程中也不能执行，所以我们需要用到更复杂的机制来解决 STW 的问题。")]),t._v(" "),a("h2",{attrs:{id:"三色抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三色抽象"}},[t._v("#")]),t._v(" 三色抽象")]),t._v(" "),a("p",[t._v("为了解决原始标记清除算法带来的长时间 STW，多数现代的追踪式垃圾收集器都会实现三色标记算法的变种以缩短 STW 的时间。三色标记算法将程序中的对象分成白色、黑色和灰色三类")]),t._v(" "),a("ul",[a("li",[t._v("白色对象 — 潜在的垃圾，其内存可能会被垃圾收集器回收；")]),t._v(" "),a("li",[t._v("黑色对象 — 活跃的对象，包括不存在任何引用外部指针的对象以及从根对象可达的对象；")]),t._v(" "),a("li",[t._v("灰色对象 — 活跃的对象，因为存在指向白色对象的外部指针，垃圾收集器会扫描这些对象的子对象；")])]),t._v(" "),a("p",[t._v("在垃圾收集器开始工作时，程序中不存在任何的黑色对象，垃圾收集的根对象会被标记成灰色，垃圾收集器只会从灰色对象集合中取出对象开始扫描，当灰色集合中不存在任何对象时，标记阶段就会结束。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-3.66h9x2qe51o0.webp",alt:"三色标记垃圾收集器的执行过程"}})]),t._v(" "),a("p",[t._v("三色标记垃圾收集器的工作原理很简单，我们可以将其归纳成以下几个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("从灰色对象的集合中选择一个灰色对象并将其标记成黑色；")]),t._v(" "),a("li",[t._v("将黑色对象指向的所有对象都标记成灰色，保证该对象和被该对象引用的对象都不会被回收；")]),t._v(" "),a("li",[t._v("重复上述两个步骤直到对象图中不存在灰色对象；")])]),t._v(" "),a("p",[t._v("当三色的标记清除的标记阶段结束之后，应用程序的堆中就不存在任何的灰色对象，我们只能看到黑色的存活对象以及白色的垃圾对象，垃圾收集器可以回收这些白色的垃圾，下面是使用三色标记垃圾收集器执行标记后的堆内存，堆中只有对象 D 为待回收的垃圾：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-4.5f3nfhkfjtw0.webp",alt:"三色标记后的堆"}})]),t._v(" "),a("h3",{attrs:{id:"错误引用问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误引用问题"}},[t._v("#")]),t._v(" 错误引用问题")]),t._v(" "),a("p",[t._v("因为用户程序可能在标记执行的过程中修改对象的指针，所以三色标记清除算法本身是不可以并发或者增量执行的，它仍然需要 STW，在如下所示的三色标记过程中，用户程序建立了从 A 对象到 D 对象的引用，但是因为程序中已经不存在灰色对象了，所以 D 对象会被垃圾收集器错误地回收。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-5.2xk8g7qygym0.webp",alt:"三色标记与用户程序"}})]),t._v(" "),a("p",[t._v("本来不应该被回收的对象却被回收了，这在内存管理中是非常严重的错误，我们将这种错误称为悬挂指针，即指针没有指向特定类型的合法对象，影响了内存的安全性，想要并发或者增量地标记对象还是需要使用屏障技术。")]),t._v(" "),a("h2",{attrs:{id:"屏障技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#屏障技术"}},[t._v("#")]),t._v(" 屏障技术")]),t._v(" "),a("p",[t._v("内存屏障技术是一种屏障指令，它可以让 CPU 或者编译器在执行内存相关操作时遵循特定的约束，目前多数的现代处理器都会乱序执行指令以最大化性能，但是该技术能够保证内存操作的顺序性，在内存屏障前执行的操作一定会先于内存屏障后执行的操作 6。")]),t._v(" "),a("p",[t._v("想要在并发或者增量的标记算法中保证正确性，我们需要达成以下两种三色不变性（Tri-color invariant）中的一种：")]),t._v(" "),a("ul",[a("li",[t._v("强三色不变性 — 黑色对象不会指向白色对象，只会指向灰色对象或者黑色对象；")]),t._v(" "),a("li",[t._v("弱三色不变性 — 黑色对象指向的白色对象必须包含一条从灰色对象经由多个白色对象的可达路径")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-6.2x65k2tfz680.webp",alt:"三色不变性"}})]),t._v(" "),a("p",[t._v("上图分别展示了遵循强三色不变性和弱三色不变性的堆内存，遵循上述两个不变性中的任意一个，我们都能保证垃圾收集算法的正确性，而屏障技术就是在并发或者增量标记过程中保证三色不变性的重要技术。")]),t._v(" "),a("p",[t._v("垃圾收集中的屏障技术更像是一个钩子方法，它是在用户程序读取对象、创建新对象以及更新对象指针时执行的一段代码，根据操作类型的不同，我们可以将它们分成读屏障（Read barrier）和写屏障（Write barrier）两种，因为读屏障需要在读操作中加入代码片段，对用户程序的性能影响很大，所以编程语言往往都会采用写屏障保证三色不变性。")]),t._v(" "),a("p",[t._v("我们在这里想要介绍的是 Go 语言中使用的两种写屏障技术，分别是 Dijkstra 提出的插入写屏障和 Yuasa 提出的删除写屏障，这里会分析它们如何保证三色不变性和垃圾收集器的正确性。")]),t._v(" "),a("h2",{attrs:{id:"插入写屏障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入写屏障"}},[t._v("#")]),t._v(" 插入写屏障")]),t._v(" "),a("p",[t._v("Dijkstra 在 1978 年提出了插入写屏障，通过如下所示的写屏障，用户程序和垃圾收集器可以在交替工作的情况下保证程序执行的正确性：")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writePointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shade")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("slot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ptr\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("上述插入写屏障的伪代码非常好理解，每当执行类似 "),a("code",[t._v("*slot = ptr")]),t._v(" 的表达式时，我们会执行上述写屏障通过 "),a("code",[t._v("shade")]),t._v(" 函数尝试改变指针的颜色。如果 "),a("code",[t._v("ptr")]),t._v(" 指针是白色的，那么该函数会将该对象设置成灰色，其他情况则保持不变。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-8.3ezue7icfuq0.webp",alt:"Dijkstra 插入写屏障"}})]),t._v(" "),a("p",[t._v("假设我们在应用程序中使用 Dijkstra 提出的插入写屏障，在一个垃圾收集器和用户程序交替运行的场景中会出现如上图所示的标记过程：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("垃圾收集器将根对象指向 A 对象标记成黑色并将 A 对象指向的对象 B 标记成灰色；\n用户程序修改 A 对象的指针，将原本指向 B 对象的指针指向 C 对象，这时触发写屏障将 C 对象标记成灰色；")])]),t._v(" "),a("li",[a("p",[t._v("垃圾收集器依次遍历程序中的其他灰色对象，将它们分别标记成黑色；")])]),t._v(" "),a("li",[a("p",[t._v("Dijkstra 的插入写屏障是一种相对保守的屏障技术，它会将有存活可能的对象都标记成灰色以满足强三色不变性。在如上所示的垃圾收集过程中，实际上不再存活的 B 对象最后没有被回收；而如果我们在第二和第三步之间将指向 C 对象的指针改回指向 B，垃圾收集器仍然认为 C 对象是存活的，这些被错误标记的垃圾对象只有在下一个循环才会被回收。")])])]),t._v(" "),a("p",[t._v("插入式的 Dijkstra 写屏障虽然实现非常简单并且也能保证强三色不变性，但是它也有明显的缺点。因为栈上的对象在垃圾收集中也会被认为是根对象，所以为了保证内存的安全，Dijkstra 必须为栈上的对象增加写屏障或者在标记阶段完成重新对栈上的对象进行扫描，这两种方法各有各的缺点，前者会大幅度增加写入指针的额外开销，后者重新扫描栈对象时需要暂停程序，垃圾收集算法的设计者需要在这两者之间做出权衡。")]),t._v(" "),a("h2",{attrs:{id:"删除写屏障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除写屏障"}},[t._v("#")]),t._v(" 删除写屏障")]),t._v(" "),a("p",[t._v("Yuasa 在 1990 年的论文 Real-time garbage collection on general-purpose machines 中提出了删除写屏障，因为一旦该写屏障开始工作，它会保证开启写屏障时堆上所有对象的可达，所以也被称作快照垃圾收集（Snapshot GC）")]),t._v(" "),a("p",[t._v("该算法会使用如下所示的写屏障保证增量或者并发执行垃圾收集时程序的正确性：")]),t._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writePointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shade")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("slot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("slot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ptr\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("上述代码会在老对象的引用被删除时，将白色的老对象涂成灰色，这样删除写屏障就可以保证弱三色不变性，老对象引用的下游对象一定可以被灰色对象引用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-9.4tcv15r8q1a0.webp",alt:""}})]),t._v(" "),a("p",[t._v("假设我们在应用程序中使用 Yuasa 提出的删除写屏障，在一个垃圾收集器和用户程序交替运行的场景中会出现如上图所示的标记过程：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("垃圾收集器将根对象指向 A 对象标记成黑色并将 A 对象指向的对象 B 标记成灰色；")])]),t._v(" "),a("li",[a("p",[t._v("用户程序将 A 对象原本指向 B 的指针指向 C，触发删除写屏障，但是因为 B 对象已经是灰色的，所以不做改变；")])]),t._v(" "),a("li",[a("p",[t._v("用户程序将 B 对象原本指向 C 的指针删除，触发删除写屏障，白色的 C 对象被涂成灰色；")])]),t._v(" "),a("li",[a("p",[t._v("垃圾收集器依次遍历程序中的其他灰色对象，将它们分别标记成黑色；")])])]),t._v(" "),a("p",[t._v("上述过程中的第三步触发了 Yuasa 删除写屏障的着色，因为用户程序删除了 B 指向 C 对象的指针，所以 C 和 D 两个对象会分别违反强三色不变性和弱三色不变性：")]),t._v(" "),a("ul",[a("li",[t._v("强三色不变性 — 黑色的 A 对象直接指向白色的 C 对象；")]),t._v(" "),a("li",[t._v("弱三色不变性 — 垃圾收集器无法从某个灰色对象出发，经过几个连续的白色对象访问白色的 C 和 D 两个对象；")])]),t._v(" "),a("p",[t._v("Yuasa 删除写屏障通过对 C 对象的着色，保证了 C 对象和下游的 D 对象能够在这一次垃圾收集的循环中存活，避免发生悬挂指针以保证用户程序的正确性。")]),t._v(" "),a("h2",{attrs:{id:"增量和并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增量和并发"}},[t._v("#")]),t._v(" 增量和并发")]),t._v(" "),a("p",[t._v("传统的垃圾收集算法会在垃圾收集的执行期间暂停应用程序，一旦触发垃圾收集，垃圾收集器会抢占 CPU 的使用权占据大量的计算资源以完成标记和清除工作，然而很多追求实时的应用程序无法接受长时间的 STW。为了减少应用程序暂停的最长时间和垃圾收集的总暂停时间，我们会使用下面的策略优化现代的垃圾收集器：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-10.6ww54kaammk0.webp",alt:"垃圾收集与暂停程序"}})]),t._v(" "),a("ul",[a("li",[t._v("增量垃圾收集 — 增量地标记和清除垃圾，降低应用程序暂停的最长时间；")]),t._v(" "),a("li",[t._v("并发垃圾收集 — 利用多核的计算资源，在用户程序执行时并发标记和清除垃圾；")])]),t._v(" "),a("p",[t._v("因为增量和并发两种方式都可以与用户程序交替运行，所以我们需要使用屏障技术保证垃圾收集的正确性；与此同时，应用程序也不能等到内存溢出时触发垃圾收集，因为当内存不足时，应用程序已经无法分配内存，这与直接暂停程序没有什么区别，增量和并发的垃圾收集需要提前触发并在内存不足前完成整个循环，避免程序的长时间暂停。")]),t._v(" "),a("h2",{attrs:{id:"增量收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增量收集器"}},[t._v("#")]),t._v(" 增量收集器")]),t._v(" "),a("p",[t._v("增量式（Incremental）的垃圾收集是减少程序最长暂停时间的一种方案，它可以将原本时间较长的暂停时间切分成多个更小的 GC 时间片，虽然从垃圾收集开始到结束的时间更长了，但是这也减少了应用程序暂停的最大时间：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-11.1xiyz1b2nyow.webp",alt:""}})]),t._v(" "),a("p",[t._v("需要注意的是，增量式的垃圾收集需要与三色标记法一起使用，为了保证垃圾收集的正确性，我们需要在垃圾收集开始前打开写屏障，这样用户程序修改内存都会先经过写屏障的处理，保证了堆内存中对象关系的强三色不变性或者弱三色不变性。虽然增量式的垃圾收集能够减少最大的程序暂停时间，但是增量式收集也会增加一次 GC 循环的总时间，在垃圾收集期间，因为写屏障的影响用户程序也需要承担额外的计算开销，所以增量式的垃圾收集也不是只带来好处的，但是总体来说还是利大于弊。")]),t._v(" "),a("h2",{attrs:{id:"并发收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发收集器"}},[t._v("#")]),t._v(" 并发收集器")]),t._v(" "),a("p",[t._v("并发（Concurrent）的垃圾收集不仅能够减少程序的最长暂停时间，还能减少整个垃圾收集阶段的时间，通过开启读写屏障、利用多核优势与用户程序并行执行，并发垃圾收集器确实能够减少垃圾收集对应用程序的影响：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/knightxv/image-hosting@master/20230128/1-12.5gbyjp10zs80.webp",alt:"并发垃圾收集器"}})]),t._v(" "),a("p",[t._v("虽然并发收集器能够与用户程序一起运行，但是并不是所有阶段都可以与用户程序一起运行，部分阶段还是需要暂停用户程序的，不过与传统的算法相比，并发的垃圾收集可以将能够并发执行的工作尽量并发执行；当然，因为读写屏障的引入，并发的垃圾收集器也一定会带来额外开销，不仅会增加垃圾收集的总时间，还会影响用户程序，这是我们在设计垃圾收集策略时必须要注意的。")]),t._v(" "),a("h2",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("Go 语言的垃圾收集可以分成清除终止、标记、标记终止和清除四个不同阶段，它们分别完成了不同的工作。")]),t._v(" "),a("ol",[a("li",[t._v("清理终止阶段；\n"),a("ol",[a("li",[t._v("暂停程序，所有的处理器在这时会进入安全点（Safe point）；")]),t._v(" "),a("li",[t._v("如果当前垃圾收集循环是强制触发的，我们还需要处理还未被清理的内存管理单元；")])])]),t._v(" "),a("li",[t._v("标记阶段；\n"),a("ol",[a("li",[t._v("将状态切换至 _GCmark、开启写屏障、用户程序协助（Mutator Assists）并将根对象入队；")]),t._v(" "),a("li",[t._v("恢复执行程序，标记进程和用于协助的用户程序会开始并发标记内存中的对象，写屏障会将被覆盖的指针和新指针都标记成灰色，而所有新创建的对象都会被直接标记成黑色；")]),t._v(" "),a("li",[t._v("开始扫描根对象，包括所有 Goroutine 的栈、全局对象以及不在堆中的运行时数据结构，扫描 Goroutine 栈期间会暂停当前处理器；")]),t._v(" "),a("li",[t._v("依次处理灰色队列中的对象，将对象标记成黑色并将它们指向的对象标记成灰色；")]),t._v(" "),a("li",[t._v("使用分布式的终止算法检查剩余的工作，发现标记阶段完成后进入标记终止阶段；")])])]),t._v(" "),a("li",[t._v("标记终止阶段；\n"),a("ol",[a("li",[t._v("暂停程序、将状态切换至 _GCmarktermination 并关闭辅助标记的用户程序；")]),t._v(" "),a("li",[t._v("清理处理器上的线程缓存；")])])]),t._v(" "),a("li",[t._v("清理阶段；\n"),a("ol",[a("li",[t._v("将状态切换至 _GCoff 开始清理阶段，初始化清理状态并关闭写屏障；")]),t._v(" "),a("li",[t._v("恢复用户程序，所有新创建的对象会标记成白色；")]),t._v(" "),a("li",[t._v("后台并发清理所有的内存管理单元，当 Goroutine 申请新的内存管理单元时就会触发清理；")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);